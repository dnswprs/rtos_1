
rtos_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08006830  08006830  00007830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800698c  0800698c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  0800698c  0800698c  0000798c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006994  08006994  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006994  08006994  00007994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006998  08006998  00007998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800699c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          00004bac  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004c0c  20004c0c  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178ac  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003388  00000000  00000000  0001f93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  00022cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001044  00000000  00000000  000241b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f25  00000000  00000000  000251f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001676c  00000000  00000000  00029119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2292  00000000  00000000  0003f885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121b17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d6c  00000000  00000000  00121b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001278c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006818 	.word	0x08006818

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006818 	.word	0x08006818

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fc14 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f852 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f936 	bl	80007ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 f8b8 	bl	80006f4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000584:	f000 f908 	bl	8000798 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000588:	f002 ff28 	bl	80033dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800058c:	4a15      	ldr	r2, [pc, #84]	@ (80005e4 <main+0x74>)
 800058e:	2100      	movs	r1, #0
 8000590:	4815      	ldr	r0, [pc, #84]	@ (80005e8 <main+0x78>)
 8000592:	f002 ff6d 	bl	8003470 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a14      	ldr	r2, [pc, #80]	@ (80005ec <main+0x7c>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(startButtonTask, NULL, &buttonTask_attributes);
 800059c:	4a14      	ldr	r2, [pc, #80]	@ (80005f0 <main+0x80>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4814      	ldr	r0, [pc, #80]	@ (80005f4 <main+0x84>)
 80005a2:	f002 ff65 	bl	8003470 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a13      	ldr	r2, [pc, #76]	@ (80005f8 <main+0x88>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(startLedTask, NULL, &ledTask_attributes);
 80005ac:	4a13      	ldr	r2, [pc, #76]	@ (80005fc <main+0x8c>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4813      	ldr	r0, [pc, #76]	@ (8000600 <main+0x90>)
 80005b2:	f002 ff5d 	bl	8003470 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <main+0x94>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of serialTask */
  serialTaskHandle = osThreadNew(startSerialTask, NULL, &serialTask_attributes);
 80005bc:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <main+0x98>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4812      	ldr	r0, [pc, #72]	@ (800060c <main+0x9c>)
 80005c2:	f002 ff55 	bl	8003470 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a11      	ldr	r2, [pc, #68]	@ (8000610 <main+0xa0>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(startAdcTask, NULL, &adcTask_attributes);
 80005cc:	4a11      	ldr	r2, [pc, #68]	@ (8000614 <main+0xa4>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4811      	ldr	r0, [pc, #68]	@ (8000618 <main+0xa8>)
 80005d2:	f002 ff4d 	bl	8003470 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a10      	ldr	r2, [pc, #64]	@ (800061c <main+0xac>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005dc:	f002 ff22 	bl	8003424 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x70>
 80005e4:	0800688c 	.word	0x0800688c
 80005e8:	08000869 	.word	0x08000869
 80005ec:	2000010c 	.word	0x2000010c
 80005f0:	080068b0 	.word	0x080068b0
 80005f4:	08000879 	.word	0x08000879
 80005f8:	20000110 	.word	0x20000110
 80005fc:	080068d4 	.word	0x080068d4
 8000600:	080008cd 	.word	0x080008cd
 8000604:	20000114 	.word	0x20000114
 8000608:	080068f8 	.word	0x080068f8
 800060c:	08000909 	.word	0x08000909
 8000610:	20000118 	.word	0x20000118
 8000614:	0800691c 	.word	0x0800691c
 8000618:	080009ad 	.word	0x080009ad
 800061c:	2000011c 	.word	0x2000011c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	@ 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fc72 	bl	8005f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000694:	23a8      	movs	r3, #168	@ 0xa8
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fa87 	bl	8001bb8 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 f9ac 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2105      	movs	r1, #5
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fce8 	bl	80020a8 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 f995 	bl	8000a0c <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_ADC1_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <MX_ADC1_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_ADC1_Init+0x98>)
 800070e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000712:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_ADC1_Init+0x98>)
 8000736:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <MX_ADC1_Init+0xa0>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_ADC1_Init+0x98>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_ADC1_Init+0x98>)
 8000750:	2201      	movs	r2, #1
 8000752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	@ (800078c <MX_ADC1_Init+0x98>)
 8000756:	f000 fb65 	bl	8000e24 <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f954 	bl	8000a0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000764:	2302      	movs	r3, #2
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_ADC1_Init+0x98>)
 8000776:	f000 fd37 	bl	80011e8 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000780:	f000 f944 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000007c 	.word	0x2000007c
 8000790:	40012000 	.word	0x40012000
 8000794:	0f000001 	.word	0x0f000001

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_USART1_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f002 f91e 	bl	8002a10 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f917 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000c4 	.word	0x200000c4
 80007e8:	40011000 	.word	0x40011000

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_GPIO_Init+0x74>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000808:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <MX_GPIO_Init+0x74>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_GPIO_Init+0x74>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2102      	movs	r1, #2
 8000820:	4810      	ldr	r0, [pc, #64]	@ (8000864 <MX_GPIO_Init+0x78>)
 8000822:	f001 f995 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN0_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800082e:	2302      	movs	r3, #2
 8000830:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN0_GPIO_Port, &GPIO_InitStruct);
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	480b      	ldr	r0, [pc, #44]	@ (8000864 <MX_GPIO_Init+0x78>)
 8000838:	f000 ffd6 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800083c:	2302      	movs	r3, #2
 800083e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_GPIO_Init+0x78>)
 8000852:	f000 ffc9 	bl	80017e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000856:	bf00      	nop
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000

08000868 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f002 fe8f 	bl	8003594 <osDelay>
 8000876:	e7fb      	b.n	8000870 <StartDefaultTask+0x8>

08000878 <startButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startButtonTask */
void startButtonTask(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonTask */
  /* Infinite loop */
  for(;;)
  {
    if(HAL_GPIO_ReadPin(BTN0_GPIO_Port, BTN0_Pin) == 0){
 8000880:	2101      	movs	r1, #1
 8000882:	4810      	ldr	r0, [pc, #64]	@ (80008c4 <startButtonTask+0x4c>)
 8000884:	f001 f94c 	bl	8001b20 <HAL_GPIO_ReadPin>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d107      	bne.n	800089e <startButtonTask+0x26>
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800088e:	2201      	movs	r2, #1
 8000890:	2102      	movs	r1, #2
 8000892:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <startButtonTask+0x4c>)
 8000894:	f001 f95c 	bl	8001b50 <HAL_GPIO_WritePin>
    	btn0Pos = 1;
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <startButtonTask+0x50>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
//	    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    }
    if(HAL_GPIO_ReadPin(BTN0_GPIO_Port, BTN0_Pin) == 1){
 800089e:	2101      	movs	r1, #1
 80008a0:	4808      	ldr	r0, [pc, #32]	@ (80008c4 <startButtonTask+0x4c>)
 80008a2:	f001 f93d 	bl	8001b20 <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d107      	bne.n	80008bc <startButtonTask+0x44>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2102      	movs	r1, #2
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <startButtonTask+0x4c>)
 80008b2:	f001 f94d 	bl	8001b50 <HAL_GPIO_WritePin>
		btn0Pos = 0;
 80008b6:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <startButtonTask+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
	}
    osDelay(200);
 80008bc:	20c8      	movs	r0, #200	@ 0xc8
 80008be:	f002 fe69 	bl	8003594 <osDelay>
    if(HAL_GPIO_ReadPin(BTN0_GPIO_Port, BTN0_Pin) == 0){
 80008c2:	e7dd      	b.n	8000880 <startButtonTask+0x8>
 80008c4:	40020000 	.word	0x40020000
 80008c8:	20000120 	.word	0x20000120

080008cc <startLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLedTask */
void startLedTask(void *argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startLedTask */
  /* Infinite loop */
  for(;;)
  {
	if(btn0Pos != 1 || serialBtnFlag == 1){
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <startLedTask+0x30>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d103      	bne.n	80008e4 <startLedTask+0x18>
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <startLedTask+0x34>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d107      	bne.n	80008f4 <startLedTask+0x28>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008e4:	2102      	movs	r1, #2
 80008e6:	4807      	ldr	r0, [pc, #28]	@ (8000904 <startLedTask+0x38>)
 80008e8:	f001 f94b 	bl	8001b82 <HAL_GPIO_TogglePin>
		osDelay(100);
 80008ec:	2064      	movs	r0, #100	@ 0x64
 80008ee:	f002 fe51 	bl	8003594 <osDelay>
 80008f2:	e002      	b.n	80008fa <startLedTask+0x2e>
	}
	else{
		osDelay(100);
 80008f4:	2064      	movs	r0, #100	@ 0x64
 80008f6:	f002 fe4d 	bl	8003594 <osDelay>
	if(btn0Pos != 1 || serialBtnFlag == 1){
 80008fa:	e7eb      	b.n	80008d4 <startLedTask+0x8>
 80008fc:	20000120 	.word	0x20000120
 8000900:	20000121 	.word	0x20000121
 8000904:	40020000 	.word	0x40020000

08000908 <startSerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSerialTask */
void startSerialTask(void *argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	@ 0x70
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	uint8_t choice;
	char buffer[100];
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 50) == HAL_OK){
 8000910:	f107 016f 	add.w	r1, r7, #111	@ 0x6f
 8000914:	2332      	movs	r3, #50	@ 0x32
 8000916:	2201      	movs	r2, #1
 8000918:	481f      	ldr	r0, [pc, #124]	@ (8000998 <startSerialTask+0x90>)
 800091a:	f002 f954 	bl	8002bc6 <HAL_UART_Receive>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d134      	bne.n	800098e <startSerialTask+0x86>
		  switch(choice){
 8000924:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000928:	2b32      	cmp	r3, #50	@ 0x32
 800092a:	d018      	beq.n	800095e <startSerialTask+0x56>
 800092c:	2b32      	cmp	r3, #50	@ 0x32
 800092e:	dc2d      	bgt.n	800098c <startSerialTask+0x84>
 8000930:	2b30      	cmp	r3, #48	@ 0x30
 8000932:	d002      	beq.n	800093a <startSerialTask+0x32>
 8000934:	2b31      	cmp	r3, #49	@ 0x31
 8000936:	d009      	beq.n	800094c <startSerialTask+0x44>
		  case '2':
				sprintf(buffer, "Voltage = %d\r\n",x_val);
				HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 10);
				break;
		  default :
			  break;
 8000938:	e028      	b.n	800098c <startSerialTask+0x84>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	2102      	movs	r1, #2
 800093e:	4817      	ldr	r0, [pc, #92]	@ (800099c <startSerialTask+0x94>)
 8000940:	f001 f906 	bl	8001b50 <HAL_GPIO_WritePin>
				serialBtnFlag = 0;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <startSerialTask+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
				break;
 800094a:	e020      	b.n	800098e <startSerialTask+0x86>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2102      	movs	r1, #2
 8000950:	4812      	ldr	r0, [pc, #72]	@ (800099c <startSerialTask+0x94>)
 8000952:	f001 f8fd 	bl	8001b50 <HAL_GPIO_WritePin>
				serialBtnFlag = 1;
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <startSerialTask+0x98>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
				break;
 800095c:	e017      	b.n	800098e <startSerialTask+0x86>
				sprintf(buffer, "Voltage = %d\r\n",x_val);
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <startSerialTask+0x9c>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	490f      	ldr	r1, [pc, #60]	@ (80009a8 <startSerialTask+0xa0>)
 800096a:	4618      	mov	r0, r3
 800096c:	f005 fab4 	bl	8005ed8 <siprintf>
				HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 10);
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc2b 	bl	80001d0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f107 0108 	add.w	r1, r7, #8
 8000982:	230a      	movs	r3, #10
 8000984:	4804      	ldr	r0, [pc, #16]	@ (8000998 <startSerialTask+0x90>)
 8000986:	f002 f893 	bl	8002ab0 <HAL_UART_Transmit>
				break;
 800098a:	e000      	b.n	800098e <startSerialTask+0x86>
			  break;
 800098c:	bf00      	nop
		  }
	  	}else{}

	  osDelay(150);
 800098e:	2096      	movs	r0, #150	@ 0x96
 8000990:	f002 fe00 	bl	8003594 <osDelay>
	  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 50) == HAL_OK){
 8000994:	e7bc      	b.n	8000910 <startSerialTask+0x8>
 8000996:	bf00      	nop
 8000998:	200000c4 	.word	0x200000c4
 800099c:	40020000 	.word	0x40020000
 80009a0:	20000121 	.word	0x20000121
 80009a4:	20000122 	.word	0x20000122
 80009a8:	08006864 	.word	0x08006864

080009ac <startAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAdcTask */
void startAdcTask(void *argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAdcTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 80009b4:	480a      	ldr	r0, [pc, #40]	@ (80009e0 <startAdcTask+0x34>)
 80009b6:	f000 fa79 	bl	8000eac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80009ba:	210a      	movs	r1, #10
 80009bc:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <startAdcTask+0x34>)
 80009be:	f000 fb7a 	bl	80010b6 <HAL_ADC_PollForConversion>
	  x_val = (HAL_ADC_GetValue(&hadc1));
 80009c2:	4807      	ldr	r0, [pc, #28]	@ (80009e0 <startAdcTask+0x34>)
 80009c4:	f000 fc02 	bl	80011cc <HAL_ADC_GetValue>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <startAdcTask+0x38>)
 80009ce:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <startAdcTask+0x34>)
 80009d2:	f000 fb3d 	bl	8001050 <HAL_ADC_Stop>

	  osDelay(100);
 80009d6:	2064      	movs	r0, #100	@ 0x64
 80009d8:	f002 fddc 	bl	8003594 <osDelay>
	  HAL_ADC_Start(&hadc1);
 80009dc:	bf00      	nop
 80009de:	e7e9      	b.n	80009b4 <startAdcTask+0x8>
 80009e0:	2000007c 	.word	0x2000007c
 80009e4:	20000122 	.word	0x20000122

080009e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fa:	f000 f9f3 	bl	8000de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010000 	.word	0x40010000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_MspInit+0x54>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	4a11      	ldr	r2, [pc, #68]	@ (8000a6c <HAL_MspInit+0x54>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_MspInit+0x54>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <HAL_MspInit+0x54>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <HAL_MspInit+0x54>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_MspInit+0x54>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	210f      	movs	r1, #15
 8000a5a:	f06f 0001 	mvn.w	r0, #1
 8000a5e:	f000 fe99 	bl	8001794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_ADC_MspInit+0x7c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d127      	bne.n	8000ae2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <HAL_ADC_MspInit+0x80>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	4a15      	ldr	r2, [pc, #84]	@ (8000af0 <HAL_ADC_MspInit+0x80>)
 8000a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa2:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <HAL_ADC_MspInit+0x80>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <HAL_ADC_MspInit+0x80>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <HAL_ADC_MspInit+0x80>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <HAL_ADC_MspInit+0x80>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aca:	2304      	movs	r3, #4
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_ADC_MspInit+0x84>)
 8000ade:	f000 fe83 	bl	80017e8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40012000 	.word	0x40012000
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <HAL_UART_MspInit+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12c      	bne.n	8000b74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a17      	ldr	r2, [pc, #92]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b64:	2307      	movs	r3, #7
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_UART_MspInit+0x8c>)
 8000b70:	f000 fe3a 	bl	80017e8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	@ 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40011000 	.word	0x40011000
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	@ 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c5c <HAL_InitTick+0xd4>)
 8000b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8000c5c <HAL_InitTick+0xd4>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c5c <HAL_InitTick+0xd4>)
 8000baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb4:	f107 020c 	add.w	r2, r7, #12
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fc52 	bl	8002468 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bc4:	f001 fc3c 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd0:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <HAL_InitTick+0xd8>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0c9b      	lsrs	r3, r3, #18
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bde:	4a22      	ldr	r2, [pc, #136]	@ (8000c68 <HAL_InitTick+0xe0>)
 8000be0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000be4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000be8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bea:	4a1e      	ldr	r2, [pc, #120]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c02:	4818      	ldr	r0, [pc, #96]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000c04:	f001 fc62 	bl	80024cc <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d11b      	bne.n	8000c4e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c16:	4813      	ldr	r0, [pc, #76]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000c18:	f001 fcb2 	bl	8002580 <HAL_TIM_Base_Start_IT>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d111      	bne.n	8000c4e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c2a:	2019      	movs	r0, #25
 8000c2c:	f000 fdce 	bl	80017cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b0f      	cmp	r3, #15
 8000c34:	d808      	bhi.n	8000c48 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c36:	2200      	movs	r2, #0
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2019      	movs	r0, #25
 8000c3c:	f000 fdaa 	bl	8001794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <HAL_InitTick+0xe4>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e002      	b.n	8000c4e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3730      	adds	r7, #48	@ 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	20000124 	.word	0x20000124
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	20000004 	.word	0x20000004

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <NMI_Handler+0x4>

08000c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <MemManage_Handler+0x4>

08000c88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cae:	f001 fcd7 	bl	8002660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000124 	.word	0x20000124

08000cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc4:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <_sbrk+0x5c>)
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <_sbrk+0x60>)
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d207      	bcs.n	8000cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cec:	f005 f91c 	bl	8005f28 <__errno>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20020000 	.word	0x20020000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	2000016c 	.word	0x2000016c
 8000d24:	20004c10 	.word	0x20004c10

08000d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d50:	f7ff ffea 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f005 f8db 	bl	8005f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fbf7 	bl	8000570 <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d90:	0800699c 	.word	0x0800699c
  ldr r2, =_sbss
 8000d94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d98:	20004c0c 	.word	0x20004c0c

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <HAL_Init+0x40>)
 8000daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db0:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <HAL_Init+0x40>)
 8000db6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <HAL_Init+0x40>)
 8000dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 fcd8 	bl	800177e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f7ff feda 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd4:	f7ff fe20 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023c00 	.word	0x40023c00

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000170 	.word	0x20000170

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000170 	.word	0x20000170

08000e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e033      	b.n	8000ea2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fe14 	bl	8000a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d118      	bne.n	8000e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e6a:	f023 0302 	bic.w	r3, r3, #2
 8000e6e:	f043 0202 	orr.w	r2, r3, #2
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fad8 	bl	800142c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	f023 0303 	bic.w	r3, r3, #3
 8000e8a:	f043 0201 	orr.w	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e92:	e001      	b.n	8000e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_Start+0x1a>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e0b2      	b.n	800102c <HAL_ADC_Start+0x180>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d018      	beq.n	8000f0e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eec:	4b52      	ldr	r3, [pc, #328]	@ (8001038 <HAL_ADC_Start+0x18c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a52      	ldr	r2, [pc, #328]	@ (800103c <HAL_ADC_Start+0x190>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0c9a      	lsrs	r2, r3, #18
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f00:	e002      	b.n	8000f08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f9      	bne.n	8000f02 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d17a      	bne.n	8001012 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d007      	beq.n	8000f4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f5a:	d106      	bne.n	8000f6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f60:	f023 0206 	bic.w	r2, r3, #6
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f68:	e002      	b.n	8000f70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f78:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <HAL_ADC_Start+0x194>)
 8000f7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000f84:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d12a      	bne.n	8000fe8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a2b      	ldr	r2, [pc, #172]	@ (8001044 <HAL_ADC_Start+0x198>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d015      	beq.n	8000fc8 <HAL_ADC_Start+0x11c>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a29      	ldr	r2, [pc, #164]	@ (8001048 <HAL_ADC_Start+0x19c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d105      	bne.n	8000fb2 <HAL_ADC_Start+0x106>
 8000fa6:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <HAL_ADC_Start+0x194>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00a      	beq.n	8000fc8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a25      	ldr	r2, [pc, #148]	@ (800104c <HAL_ADC_Start+0x1a0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d136      	bne.n	800102a <HAL_ADC_Start+0x17e>
 8000fbc:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <HAL_ADC_Start+0x194>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d130      	bne.n	800102a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d129      	bne.n	800102a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	e020      	b.n	800102a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <HAL_ADC_Start+0x198>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d11b      	bne.n	800102a <HAL_ADC_Start+0x17e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d114      	bne.n	800102a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	e00b      	b.n	800102a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	f043 0210 	orr.w	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000000 	.word	0x20000000
 800103c:	431bde83 	.word	0x431bde83
 8001040:	40012300 	.word	0x40012300
 8001044:	40012000 	.word	0x40012000
 8001048:	40012100 	.word	0x40012100
 800104c:	40012200 	.word	0x40012200

08001050 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800105e:	2b01      	cmp	r3, #1
 8001060:	d101      	bne.n	8001066 <HAL_ADC_Stop+0x16>
 8001062:	2302      	movs	r3, #2
 8001064:	e021      	b.n	80010aa <HAL_ADC_Stop+0x5a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d109      	bne.n	80010a0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010d2:	d113      	bne.n	80010fc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010e2:	d10b      	bne.n	80010fc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	f043 0220 	orr.w	r2, r3, #32
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e063      	b.n	80011c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80010fc:	f7ff fe86 	bl	8000e0c <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001102:	e021      	b.n	8001148 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800110a:	d01d      	beq.n	8001148 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <HAL_ADC_PollForConversion+0x6c>
 8001112:	f7ff fe7b 	bl	8000e0c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d212      	bcs.n	8001148 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b02      	cmp	r3, #2
 800112e:	d00b      	beq.n	8001148 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f043 0204 	orr.w	r2, r3, #4
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e03d      	b.n	80011c4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b02      	cmp	r3, #2
 8001154:	d1d6      	bne.n	8001104 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f06f 0212 	mvn.w	r2, #18
 800115e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d123      	bne.n	80011c2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800117e:	2b00      	cmp	r3, #0
 8001180:	d11f      	bne.n	80011c2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001188:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d105      	bne.n	80011c2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1c>
 8001200:	2302      	movs	r3, #2
 8001202:	e105      	b.n	8001410 <HAL_ADC_ConfigChannel+0x228>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b09      	cmp	r3, #9
 8001212:	d925      	bls.n	8001260 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68d9      	ldr	r1, [r3, #12]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	3b1e      	subs	r3, #30
 800122a:	2207      	movs	r2, #7
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43da      	mvns	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	400a      	ands	r2, r1
 8001238:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68d9      	ldr	r1, [r3, #12]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	4603      	mov	r3, r0
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4403      	add	r3, r0
 8001252:	3b1e      	subs	r3, #30
 8001254:	409a      	lsls	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	e022      	b.n	80012a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6919      	ldr	r1, [r3, #16]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b29b      	uxth	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	2207      	movs	r2, #7
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	400a      	ands	r2, r1
 8001282:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6919      	ldr	r1, [r3, #16]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	4603      	mov	r3, r0
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4403      	add	r3, r0
 800129c:	409a      	lsls	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d824      	bhi.n	80012f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	3b05      	subs	r3, #5
 80012c0:	221f      	movs	r2, #31
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	400a      	ands	r2, r1
 80012ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	3b05      	subs	r3, #5
 80012ea:	fa00 f203 	lsl.w	r2, r0, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80012f6:	e04c      	b.n	8001392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	d824      	bhi.n	800134a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	3b23      	subs	r3, #35	@ 0x23
 8001312:	221f      	movs	r2, #31
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43da      	mvns	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	400a      	ands	r2, r1
 8001320:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b23      	subs	r3, #35	@ 0x23
 800133c:	fa00 f203 	lsl.w	r2, r0, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	631a      	str	r2, [r3, #48]	@ 0x30
 8001348:	e023      	b.n	8001392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	3b41      	subs	r3, #65	@ 0x41
 800135c:	221f      	movs	r2, #31
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	400a      	ands	r2, r1
 800136a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3b41      	subs	r3, #65	@ 0x41
 8001386:	fa00 f203 	lsl.w	r2, r0, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001392:	4b22      	ldr	r3, [pc, #136]	@ (800141c <HAL_ADC_ConfigChannel+0x234>)
 8001394:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a21      	ldr	r2, [pc, #132]	@ (8001420 <HAL_ADC_ConfigChannel+0x238>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d109      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1cc>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b12      	cmp	r3, #18
 80013a6:	d105      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a19      	ldr	r2, [pc, #100]	@ (8001420 <HAL_ADC_ConfigChannel+0x238>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d123      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x21e>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b10      	cmp	r3, #16
 80013c4:	d003      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x1e6>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b11      	cmp	r3, #17
 80013cc:	d11b      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b10      	cmp	r3, #16
 80013e0:	d111      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_ADC_ConfigChannel+0x23c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <HAL_ADC_ConfigChannel+0x240>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	0c9a      	lsrs	r2, r3, #18
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013f8:	e002      	b.n	8001400 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f9      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40012300 	.word	0x40012300
 8001420:	40012000 	.word	0x40012000
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83

0800142c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001434:	4b79      	ldr	r3, [pc, #484]	@ (800161c <ADC_Init+0x1f0>)
 8001436:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	431a      	orrs	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	021a      	lsls	r2, r3, #8
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6899      	ldr	r1, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014be:	4a58      	ldr	r2, [pc, #352]	@ (8001620 <ADC_Init+0x1f4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d022      	beq.n	800150a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6899      	ldr	r1, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6899      	ldr	r1, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e00f      	b.n	800152a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001528:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0202 	bic.w	r2, r2, #2
 8001538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6899      	ldr	r1, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7e1b      	ldrb	r3, [r3, #24]
 8001544:	005a      	lsls	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01b      	beq.n	8001590 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001566:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001576:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6859      	ldr	r1, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	3b01      	subs	r3, #1
 8001584:	035a      	lsls	r2, r3, #13
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	e007      	b.n	80015a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800159e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	051a      	lsls	r2, r3, #20
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6899      	ldr	r1, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015e2:	025a      	lsls	r2, r3, #9
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6899      	ldr	r1, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	029a      	lsls	r2, r3, #10
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	609a      	str	r2, [r3, #8]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40012300 	.word	0x40012300
 8001620:	0f000001 	.word	0x0f000001

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	@ (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	@ (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	@ (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff4c 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a6:	f7ff ff61 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f7ff ffb1 	bl	8001718 <NVIC_EncodePriority>
 80017b6:	4602      	mov	r2, r0
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff80 	bl	80016c4 <__NVIC_SetPriority>
}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff54 	bl	8001688 <__NVIC_EnableIRQ>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	@ 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	e16b      	b.n	8001adc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 815a 	bne.w	8001ad6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d005      	beq.n	800183a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	2b02      	cmp	r3, #2
 8001838:	d130      	bne.n	800189c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 0201 	and.w	r2, r3, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d017      	beq.n	80018d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d123      	bne.n	800192c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3208      	adds	r2, #8
 80018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	220f      	movs	r2, #15
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	69b9      	ldr	r1, [r7, #24]
 8001928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0203 	and.w	r2, r3, #3
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80b4 	beq.w	8001ad6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b60      	ldr	r3, [pc, #384]	@ (8001af4 <HAL_GPIO_Init+0x30c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	4a5f      	ldr	r2, [pc, #380]	@ (8001af4 <HAL_GPIO_Init+0x30c>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800197c:	6453      	str	r3, [r2, #68]	@ 0x44
 800197e:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <HAL_GPIO_Init+0x30c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800198a:	4a5b      	ldr	r2, [pc, #364]	@ (8001af8 <HAL_GPIO_Init+0x310>)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a52      	ldr	r2, [pc, #328]	@ (8001afc <HAL_GPIO_Init+0x314>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d02b      	beq.n	8001a0e <HAL_GPIO_Init+0x226>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a51      	ldr	r2, [pc, #324]	@ (8001b00 <HAL_GPIO_Init+0x318>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d025      	beq.n	8001a0a <HAL_GPIO_Init+0x222>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a50      	ldr	r2, [pc, #320]	@ (8001b04 <HAL_GPIO_Init+0x31c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01f      	beq.n	8001a06 <HAL_GPIO_Init+0x21e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001b08 <HAL_GPIO_Init+0x320>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d019      	beq.n	8001a02 <HAL_GPIO_Init+0x21a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4e      	ldr	r2, [pc, #312]	@ (8001b0c <HAL_GPIO_Init+0x324>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0x216>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001b10 <HAL_GPIO_Init+0x328>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x212>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001b14 <HAL_GPIO_Init+0x32c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <HAL_GPIO_Init+0x20e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001b18 <HAL_GPIO_Init+0x330>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_GPIO_Init+0x20a>
 80019ee:	2307      	movs	r3, #7
 80019f0:	e00e      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019f2:	2308      	movs	r3, #8
 80019f4:	e00c      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019f6:	2306      	movs	r3, #6
 80019f8:	e00a      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x228>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	@ (8001af8 <HAL_GPIO_Init+0x310>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b1c <HAL_GPIO_Init+0x334>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a32      	ldr	r2, [pc, #200]	@ (8001b1c <HAL_GPIO_Init+0x334>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b30      	ldr	r3, [pc, #192]	@ (8001b1c <HAL_GPIO_Init+0x334>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a27      	ldr	r2, [pc, #156]	@ (8001b1c <HAL_GPIO_Init+0x334>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <HAL_GPIO_Init+0x334>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b1c <HAL_GPIO_Init+0x334>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <HAL_GPIO_Init+0x334>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <HAL_GPIO_Init+0x334>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f ae90 	bls.w	8001804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40021c00 	.word	0x40021c00
 8001b1c:	40013c00 	.word	0x40013c00

08001b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e001      	b.n	8001b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b6c:	e003      	b.n	8001b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b94:	887a      	ldrh	r2, [r7, #2]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	041a      	lsls	r2, r3, #16
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	619a      	str	r2, [r3, #24]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e267      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d075      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bd6:	4b88      	ldr	r3, [pc, #544]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d00c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be2:	4b85      	ldr	r3, [pc, #532]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d112      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bee:	4b82      	ldr	r3, [pc, #520]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bfa:	d10b      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	4b7e      	ldr	r3, [pc, #504]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d05b      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x108>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d157      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e242      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c1c:	d106      	bne.n	8001c2c <HAL_RCC_OscConfig+0x74>
 8001c1e:	4b76      	ldr	r3, [pc, #472]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a75      	ldr	r2, [pc, #468]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e01d      	b.n	8001c68 <HAL_RCC_OscConfig+0xb0>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x98>
 8001c36:	4b70      	ldr	r3, [pc, #448]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a6f      	ldr	r2, [pc, #444]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b6d      	ldr	r3, [pc, #436]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6c      	ldr	r2, [pc, #432]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0xb0>
 8001c50:	4b69      	ldr	r3, [pc, #420]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a68      	ldr	r2, [pc, #416]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b66      	ldr	r3, [pc, #408]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a65      	ldr	r2, [pc, #404]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff f8cc 	bl	8000e0c <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff f8c8 	bl	8000e0c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e207      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0xc0>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff f8b8 	bl	8000e0c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f8b4 	bl	8000e0c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1f3      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	4b51      	ldr	r3, [pc, #324]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xe8>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d063      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cce:	4b4a      	ldr	r3, [pc, #296]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cda:	4b47      	ldr	r3, [pc, #284]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d11c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce6:	4b44      	ldr	r3, [pc, #272]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d116      	bne.n	8001d20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	4b41      	ldr	r3, [pc, #260]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_RCC_OscConfig+0x152>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e1c7      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4937      	ldr	r1, [pc, #220]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	e03a      	b.n	8001d96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d28:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <HAL_RCC_OscConfig+0x244>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f86d 	bl	8000e0c <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d36:	f7ff f869 	bl	8000e0c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e1a8      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4925      	ldr	r1, [pc, #148]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	e015      	b.n	8001d96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6a:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <HAL_RCC_OscConfig+0x244>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f84c 	bl	8000e0c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d78:	f7ff f848 	bl	8000e0c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e187      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d036      	beq.n	8001e10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d016      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <HAL_RCC_OscConfig+0x248>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff f82c 	bl	8000e0c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff f828 	bl	8000e0c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e167      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x200>
 8001dd6:	e01b      	b.n	8001e10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_RCC_OscConfig+0x248>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff f815 	bl	8000e0c <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	e00e      	b.n	8001e04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de6:	f7ff f811 	bl	8000e0c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d907      	bls.n	8001e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e150      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	42470000 	.word	0x42470000
 8001e00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	4b88      	ldr	r3, [pc, #544]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ea      	bne.n	8001de6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8097 	beq.w	8001f4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b81      	ldr	r3, [pc, #516]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b7d      	ldr	r3, [pc, #500]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a7c      	ldr	r2, [pc, #496]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	4b77      	ldr	r3, [pc, #476]	@ (800202c <HAL_RCC_OscConfig+0x474>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d118      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5a:	4b74      	ldr	r3, [pc, #464]	@ (800202c <HAL_RCC_OscConfig+0x474>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a73      	ldr	r2, [pc, #460]	@ (800202c <HAL_RCC_OscConfig+0x474>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e66:	f7fe ffd1 	bl	8000e0c <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6e:	f7fe ffcd 	bl	8000e0c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e10c      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	4b6a      	ldr	r3, [pc, #424]	@ (800202c <HAL_RCC_OscConfig+0x474>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2ea>
 8001e94:	4b64      	ldr	r3, [pc, #400]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e98:	4a63      	ldr	r2, [pc, #396]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea0:	e01c      	b.n	8001edc <HAL_RCC_OscConfig+0x324>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x30c>
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eae:	4a5e      	ldr	r2, [pc, #376]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eba:	4a5b      	ldr	r2, [pc, #364]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0x324>
 8001ec4:	4b58      	ldr	r3, [pc, #352]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec8:	4a57      	ldr	r2, [pc, #348]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed0:	4b55      	ldr	r3, [pc, #340]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed4:	4a54      	ldr	r2, [pc, #336]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	f023 0304 	bic.w	r3, r3, #4
 8001eda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d015      	beq.n	8001f10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7fe ff92 	bl	8000e0c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7fe ff8e 	bl	8000e0c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0cb      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f02:	4b49      	ldr	r3, [pc, #292]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ee      	beq.n	8001eec <HAL_RCC_OscConfig+0x334>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7fe ff7c 	bl	8000e0c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f7fe ff78 	bl	8000e0c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0b5      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ee      	bne.n	8001f18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f40:	4b39      	ldr	r3, [pc, #228]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	4a38      	ldr	r2, [pc, #224]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a1 	beq.w	8002098 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f56:	4b34      	ldr	r3, [pc, #208]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d05c      	beq.n	800201c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d141      	bne.n	8001fee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b31      	ldr	r3, [pc, #196]	@ (8002030 <HAL_RCC_OscConfig+0x478>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7fe ff4c 	bl	8000e0c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe ff48 	bl	8000e0c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e087      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	019b      	lsls	r3, r3, #6
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	041b      	lsls	r3, r3, #16
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	491b      	ldr	r1, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HAL_RCC_OscConfig+0x478>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe ff21 	bl	8000e0c <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7fe ff1d 	bl	8000e0c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e05c      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x416>
 8001fec:	e054      	b.n	8002098 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <HAL_RCC_OscConfig+0x478>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe ff0a 	bl	8000e0c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe ff06 	bl	8000e0c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e045      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_RCC_OscConfig+0x470>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x444>
 800201a:	e03d      	b.n	8002098 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e038      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
 8002028:	40023800 	.word	0x40023800
 800202c:	40007000 	.word	0x40007000
 8002030:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002034:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_RCC_OscConfig+0x4ec>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d028      	beq.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d121      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d11a      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800206a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800206c:	4293      	cmp	r3, r2
 800206e:	d111      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	085b      	lsrs	r3, r3, #1
 800207c:	3b01      	subs	r3, #1
 800207e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0cc      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b68      	ldr	r3, [pc, #416]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d90c      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b65      	ldr	r3, [pc, #404]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b63      	ldr	r3, [pc, #396]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b8      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b59      	ldr	r3, [pc, #356]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a58      	ldr	r2, [pc, #352]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002106:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b53      	ldr	r3, [pc, #332]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a52      	ldr	r2, [pc, #328]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800211e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b50      	ldr	r3, [pc, #320]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494d      	ldr	r1, [pc, #308]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d044      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d119      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d003      	beq.n	8002166 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002162:	2b03      	cmp	r3, #3
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b3f      	ldr	r3, [pc, #252]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	4b3b      	ldr	r3, [pc, #236]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e067      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002186:	4b37      	ldr	r3, [pc, #220]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 0203 	bic.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4934      	ldr	r1, [pc, #208]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002198:	f7fe fe38 	bl	8000e0c <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7fe fe34 	bl	8000e0c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e04f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 020c 	and.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1eb      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d20c      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b22      	ldr	r3, [pc, #136]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e032      	b.n	8002256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4916      	ldr	r1, [pc, #88]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221a:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490e      	ldr	r1, [pc, #56]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f821 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	@ (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a09      	ldr	r2, [pc, #36]	@ (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fc9a 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023c00 	.word	0x40023c00
 8002264:	40023800 	.word	0x40023800
 8002268:	08006940 	.word	0x08006940
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002278:	b090      	sub	sp, #64	@ 0x40
 800227a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800228c:	4b59      	ldr	r3, [pc, #356]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d00d      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002298:	2b08      	cmp	r3, #8
 800229a:	f200 80a1 	bhi.w	80023e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x34>
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0x3a>
 80022a6:	e09b      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a8:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80022aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022ac:	e09b      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ae:	4b53      	ldr	r3, [pc, #332]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x188>)
 80022b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022b2:	e098      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b4:	4b4f      	ldr	r3, [pc, #316]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022be:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d028      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ca:	4b4a      	ldr	r3, [pc, #296]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	099b      	lsrs	r3, r3, #6
 80022d0:	2200      	movs	r2, #0
 80022d2:	623b      	str	r3, [r7, #32]
 80022d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022dc:	2100      	movs	r1, #0
 80022de:	4b47      	ldr	r3, [pc, #284]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x188>)
 80022e0:	fb03 f201 	mul.w	r2, r3, r1
 80022e4:	2300      	movs	r3, #0
 80022e6:	fb00 f303 	mul.w	r3, r0, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	4a43      	ldr	r2, [pc, #268]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x188>)
 80022ee:	fba0 1202 	umull	r1, r2, r0, r2
 80022f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022f4:	460a      	mov	r2, r1
 80022f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80022f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022fa:	4413      	add	r3, r2
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002300:	2200      	movs	r2, #0
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	61fa      	str	r2, [r7, #28]
 8002306:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800230a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800230e:	f7fd ffb7 	bl	8000280 <__aeabi_uldivmod>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4613      	mov	r3, r2
 8002318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800231a:	e053      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231c:	4b35      	ldr	r3, [pc, #212]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	2200      	movs	r2, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	617a      	str	r2, [r7, #20]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800232e:	f04f 0b00 	mov.w	fp, #0
 8002332:	4652      	mov	r2, sl
 8002334:	465b      	mov	r3, fp
 8002336:	f04f 0000 	mov.w	r0, #0
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	0159      	lsls	r1, r3, #5
 8002340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002344:	0150      	lsls	r0, r2, #5
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	ebb2 080a 	subs.w	r8, r2, sl
 800234e:	eb63 090b 	sbc.w	r9, r3, fp
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800235e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002362:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002366:	ebb2 0408 	subs.w	r4, r2, r8
 800236a:	eb63 0509 	sbc.w	r5, r3, r9
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	00eb      	lsls	r3, r5, #3
 8002378:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800237c:	00e2      	lsls	r2, r4, #3
 800237e:	4614      	mov	r4, r2
 8002380:	461d      	mov	r5, r3
 8002382:	eb14 030a 	adds.w	r3, r4, sl
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	eb45 030b 	adc.w	r3, r5, fp
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800239a:	4629      	mov	r1, r5
 800239c:	028b      	lsls	r3, r1, #10
 800239e:	4621      	mov	r1, r4
 80023a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023a4:	4621      	mov	r1, r4
 80023a6:	028a      	lsls	r2, r1, #10
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ae:	2200      	movs	r2, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	60fa      	str	r2, [r7, #12]
 80023b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b8:	f7fd ff62 	bl	8000280 <__aeabi_uldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4613      	mov	r3, r2
 80023c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	3301      	adds	r3, #1
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023de:	e002      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80023e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3740      	adds	r7, #64	@ 0x40
 80023ec:	46bd      	mov	sp, r7
 80023ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	017d7840 	.word	0x017d7840

08002400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_RCC_GetHCLKFreq+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000000 	.word	0x20000000

08002418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800241c:	f7ff fff0 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0a9b      	lsrs	r3, r3, #10
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4903      	ldr	r1, [pc, #12]	@ (800243c <HAL_RCC_GetPCLK1Freq+0x24>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	08006950 	.word	0x08006950

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002444:	f7ff ffdc 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0b5b      	lsrs	r3, r3, #13
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4903      	ldr	r1, [pc, #12]	@ (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	08006950 	.word	0x08006950

08002468 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	220f      	movs	r2, #15
 8002476:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002478:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_RCC_GetClockConfig+0x5c>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0203 	and.w	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002484:	4b0f      	ldr	r3, [pc, #60]	@ (80024c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002490:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800249c:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_GetClockConfig+0x5c>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	08db      	lsrs	r3, r3, #3
 80024a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024aa:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <HAL_RCC_GetClockConfig+0x60>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0207 	and.w	r2, r3, #7
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40023c00 	.word	0x40023c00

080024cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e041      	b.n	8002562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f839 	bl	800256a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f000 f9c0 	bl	8002890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d001      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e04e      	b.n	8002636 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a23      	ldr	r2, [pc, #140]	@ (8002644 <HAL_TIM_Base_Start_IT+0xc4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d022      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x80>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c2:	d01d      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x80>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002648 <HAL_TIM_Base_Start_IT+0xc8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d018      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x80>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1e      	ldr	r2, [pc, #120]	@ (800264c <HAL_TIM_Base_Start_IT+0xcc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x80>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002650 <HAL_TIM_Base_Start_IT+0xd0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00e      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x80>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002654 <HAL_TIM_Base_Start_IT+0xd4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x80>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a19      	ldr	r2, [pc, #100]	@ (8002658 <HAL_TIM_Base_Start_IT+0xd8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x80>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a18      	ldr	r2, [pc, #96]	@ (800265c <HAL_TIM_Base_Start_IT+0xdc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d111      	bne.n	8002624 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b06      	cmp	r3, #6
 8002610:	d010      	beq.n	8002634 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	e007      	b.n	8002634 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40000400 	.word	0x40000400
 800264c:	40000800 	.word	0x40000800
 8002650:	40000c00 	.word	0x40000c00
 8002654:	40010400 	.word	0x40010400
 8002658:	40014000 	.word	0x40014000
 800265c:	40001800 	.word	0x40001800

08002660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d020      	beq.n	80026c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01b      	beq.n	80026c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0202 	mvn.w	r2, #2
 8002694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f8d2 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 80026b0:	e005      	b.n	80026be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8c4 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f8d5 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d020      	beq.n	8002710 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01b      	beq.n	8002710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0204 	mvn.w	r2, #4
 80026e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8ac 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f89e 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8af 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d020      	beq.n	800275c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01b      	beq.n	800275c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0208 	mvn.w	r2, #8
 800272c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2204      	movs	r2, #4
 8002732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f886 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002748:	e005      	b.n	8002756 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f878 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f889 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d020      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01b      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0210 	mvn.w	r2, #16
 8002778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2208      	movs	r2, #8
 800277e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f860 	bl	8002854 <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f852 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f863 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0201 	mvn.w	r2, #1
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe f90e 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00c      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f906 	bl	80029fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f834 	bl	800287c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00c      	beq.n	8002838 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0220 	mvn.w	r2, #32
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8d8 	bl	80029e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a46      	ldr	r2, [pc, #280]	@ (80029bc <TIM_Base_SetConfig+0x12c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d013      	beq.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ae:	d00f      	beq.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a43      	ldr	r2, [pc, #268]	@ (80029c0 <TIM_Base_SetConfig+0x130>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a42      	ldr	r2, [pc, #264]	@ (80029c4 <TIM_Base_SetConfig+0x134>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d007      	beq.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a41      	ldr	r2, [pc, #260]	@ (80029c8 <TIM_Base_SetConfig+0x138>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a40      	ldr	r2, [pc, #256]	@ (80029cc <TIM_Base_SetConfig+0x13c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d108      	bne.n	80028e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a35      	ldr	r2, [pc, #212]	@ (80029bc <TIM_Base_SetConfig+0x12c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d02b      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f0:	d027      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a32      	ldr	r2, [pc, #200]	@ (80029c0 <TIM_Base_SetConfig+0x130>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d023      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a31      	ldr	r2, [pc, #196]	@ (80029c4 <TIM_Base_SetConfig+0x134>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01f      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a30      	ldr	r2, [pc, #192]	@ (80029c8 <TIM_Base_SetConfig+0x138>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01b      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a2f      	ldr	r2, [pc, #188]	@ (80029cc <TIM_Base_SetConfig+0x13c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d017      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a2e      	ldr	r2, [pc, #184]	@ (80029d0 <TIM_Base_SetConfig+0x140>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a2d      	ldr	r2, [pc, #180]	@ (80029d4 <TIM_Base_SetConfig+0x144>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00f      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a2c      	ldr	r2, [pc, #176]	@ (80029d8 <TIM_Base_SetConfig+0x148>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00b      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a2b      	ldr	r2, [pc, #172]	@ (80029dc <TIM_Base_SetConfig+0x14c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a2a      	ldr	r2, [pc, #168]	@ (80029e0 <TIM_Base_SetConfig+0x150>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d003      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a29      	ldr	r2, [pc, #164]	@ (80029e4 <TIM_Base_SetConfig+0x154>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d108      	bne.n	8002954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a10      	ldr	r2, [pc, #64]	@ (80029bc <TIM_Base_SetConfig+0x12c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d003      	beq.n	8002988 <TIM_Base_SetConfig+0xf8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a12      	ldr	r2, [pc, #72]	@ (80029cc <TIM_Base_SetConfig+0x13c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d103      	bne.n	8002990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f023 0201 	bic.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]
  }
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40010000 	.word	0x40010000
 80029c0:	40000400 	.word	0x40000400
 80029c4:	40000800 	.word	0x40000800
 80029c8:	40000c00 	.word	0x40000c00
 80029cc:	40010400 	.word	0x40010400
 80029d0:	40014000 	.word	0x40014000
 80029d4:	40014400 	.word	0x40014400
 80029d8:	40014800 	.word	0x40014800
 80029dc:	40001800 	.word	0x40001800
 80029e0:	40001c00 	.word	0x40001c00
 80029e4:	40002000 	.word	0x40002000

080029e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e042      	b.n	8002aa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe f85e 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2224      	movs	r2, #36	@ 0x24
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fa09 	bl	8002e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	@ 0x28
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d175      	bne.n	8002bbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_UART_Transmit+0x2c>
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e06e      	b.n	8002bbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2221      	movs	r2, #33	@ 0x21
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aee:	f7fe f98d 	bl	8000e0c <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b08:	d108      	bne.n	8002b1c <HAL_UART_Transmit+0x6c>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	e003      	b.n	8002b24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b24:	e02e      	b.n	8002b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2180      	movs	r1, #128	@ 0x80
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f8df 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e03a      	b.n	8002bbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10b      	bne.n	8002b66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	3302      	adds	r3, #2
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e007      	b.n	8002b76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	3301      	adds	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1cb      	bne.n	8002b26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2140      	movs	r1, #64	@ 0x40
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f8ab 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e006      	b.n	8002bbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b08a      	sub	sp, #40	@ 0x28
 8002bca:	af02      	add	r7, sp, #8
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	f040 8081 	bne.w	8002cea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_UART_Receive+0x2e>
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e079      	b.n	8002cec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2222      	movs	r2, #34	@ 0x22
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c0c:	f7fe f8fe 	bl	8000e0c <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c26:	d108      	bne.n	8002c3a <HAL_UART_Receive+0x74>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d104      	bne.n	8002c3a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e003      	b.n	8002c42 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c42:	e047      	b.n	8002cd4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2120      	movs	r1, #32
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f850 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e042      	b.n	8002cec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10c      	bne.n	8002c86 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	3302      	adds	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e01f      	b.n	8002cc6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8e:	d007      	beq.n	8002ca0 <HAL_UART_Receive+0xda>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <HAL_UART_Receive+0xe8>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d106      	bne.n	8002cae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	e008      	b.n	8002cc0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1b2      	bne.n	8002c44 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e000      	b.n	8002cec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
  }
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d04:	e03b      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d0c:	d037      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0e:	f7fe f87d 	bl	8000e0c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e03a      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d023      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b80      	cmp	r3, #128	@ 0x80
 8002d3a:	d020      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b40      	cmp	r3, #64	@ 0x40
 8002d40:	d01d      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d116      	bne.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f81d 	bl	8002da6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2208      	movs	r2, #8
 8002d70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00f      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d0b4      	beq.n	8002d06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b095      	sub	sp, #84	@ 0x54
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	330c      	adds	r3, #12
 8002db4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	330c      	adds	r3, #12
 8002dcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dce:	643a      	str	r2, [r7, #64]	@ 0x40
 8002dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e5      	bne.n	8002dae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3314      	adds	r3, #20
 8002de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	e853 3f00 	ldrex	r3, [r3]
 8002df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3314      	adds	r3, #20
 8002e00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e5      	bne.n	8002de2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d119      	bne.n	8002e52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	330c      	adds	r3, #12
 8002e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f023 0310 	bic.w	r3, r3, #16
 8002e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e3e:	61ba      	str	r2, [r7, #24]
 8002e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	6979      	ldr	r1, [r7, #20]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e5      	bne.n	8002e1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e60:	bf00      	nop
 8002e62:	3754      	adds	r7, #84	@ 0x54
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e70:	b0c0      	sub	sp, #256	@ 0x100
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	ea40 0301 	orr.w	r3, r0, r1
 8002e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ec4:	f021 010c 	bic.w	r1, r1, #12
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee6:	6999      	ldr	r1, [r3, #24]
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	ea40 0301 	orr.w	r3, r0, r1
 8002ef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b8f      	ldr	r3, [pc, #572]	@ (8003138 <UART_SetConfig+0x2cc>)
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d005      	beq.n	8002f0c <UART_SetConfig+0xa0>
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b8d      	ldr	r3, [pc, #564]	@ (800313c <UART_SetConfig+0x2d0>)
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d104      	bne.n	8002f16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f0c:	f7ff fa98 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8002f10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f14:	e003      	b.n	8002f1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f16:	f7ff fa7f 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002f1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f28:	f040 810c 	bne.w	8003144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f30:	2200      	movs	r2, #0
 8002f32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f3e:	4622      	mov	r2, r4
 8002f40:	462b      	mov	r3, r5
 8002f42:	1891      	adds	r1, r2, r2
 8002f44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f46:	415b      	adcs	r3, r3
 8002f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f4e:	4621      	mov	r1, r4
 8002f50:	eb12 0801 	adds.w	r8, r2, r1
 8002f54:	4629      	mov	r1, r5
 8002f56:	eb43 0901 	adc.w	r9, r3, r1
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f6e:	4690      	mov	r8, r2
 8002f70:	4699      	mov	r9, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	eb18 0303 	adds.w	r3, r8, r3
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	eb49 0303 	adc.w	r3, r9, r3
 8002f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	18db      	adds	r3, r3, r3
 8002f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	eb42 0303 	adc.w	r3, r2, r3
 8002fa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fb0:	f7fd f966 	bl	8000280 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4b61      	ldr	r3, [pc, #388]	@ (8003140 <UART_SetConfig+0x2d4>)
 8002fba:	fba3 2302 	umull	r2, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	011c      	lsls	r4, r3, #4
 8002fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	eb12 0a01 	adds.w	sl, r2, r1
 8002fea:	4649      	mov	r1, r9
 8002fec:	eb43 0b01 	adc.w	fp, r3, r1
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ffc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003004:	4692      	mov	sl, r2
 8003006:	469b      	mov	fp, r3
 8003008:	4643      	mov	r3, r8
 800300a:	eb1a 0303 	adds.w	r3, sl, r3
 800300e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003012:	464b      	mov	r3, r9
 8003014:	eb4b 0303 	adc.w	r3, fp, r3
 8003018:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003028:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800302c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003030:	460b      	mov	r3, r1
 8003032:	18db      	adds	r3, r3, r3
 8003034:	643b      	str	r3, [r7, #64]	@ 0x40
 8003036:	4613      	mov	r3, r2
 8003038:	eb42 0303 	adc.w	r3, r2, r3
 800303c:	647b      	str	r3, [r7, #68]	@ 0x44
 800303e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003046:	f7fd f91b 	bl	8000280 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4611      	mov	r1, r2
 8003050:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <UART_SetConfig+0x2d4>)
 8003052:	fba3 2301 	umull	r2, r3, r3, r1
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2264      	movs	r2, #100	@ 0x64
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	1acb      	subs	r3, r1, r3
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003066:	4b36      	ldr	r3, [pc, #216]	@ (8003140 <UART_SetConfig+0x2d4>)
 8003068:	fba3 2302 	umull	r2, r3, r3, r2
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003074:	441c      	add	r4, r3
 8003076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800307a:	2200      	movs	r2, #0
 800307c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003080:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003088:	4642      	mov	r2, r8
 800308a:	464b      	mov	r3, r9
 800308c:	1891      	adds	r1, r2, r2
 800308e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003090:	415b      	adcs	r3, r3
 8003092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003098:	4641      	mov	r1, r8
 800309a:	1851      	adds	r1, r2, r1
 800309c:	6339      	str	r1, [r7, #48]	@ 0x30
 800309e:	4649      	mov	r1, r9
 80030a0:	414b      	adcs	r3, r1
 80030a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030b0:	4659      	mov	r1, fp
 80030b2:	00cb      	lsls	r3, r1, #3
 80030b4:	4651      	mov	r1, sl
 80030b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ba:	4651      	mov	r1, sl
 80030bc:	00ca      	lsls	r2, r1, #3
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	4642      	mov	r2, r8
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030cc:	464b      	mov	r3, r9
 80030ce:	460a      	mov	r2, r1
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030ec:	460b      	mov	r3, r1
 80030ee:	18db      	adds	r3, r3, r3
 80030f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030f2:	4613      	mov	r3, r2
 80030f4:	eb42 0303 	adc.w	r3, r2, r3
 80030f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003102:	f7fd f8bd 	bl	8000280 <__aeabi_uldivmod>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <UART_SetConfig+0x2d4>)
 800310c:	fba3 1302 	umull	r1, r3, r3, r2
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	2164      	movs	r1, #100	@ 0x64
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	3332      	adds	r3, #50	@ 0x32
 800311e:	4a08      	ldr	r2, [pc, #32]	@ (8003140 <UART_SetConfig+0x2d4>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	f003 0207 	and.w	r2, r3, #7
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4422      	add	r2, r4
 8003132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003134:	e106      	b.n	8003344 <UART_SetConfig+0x4d8>
 8003136:	bf00      	nop
 8003138:	40011000 	.word	0x40011000
 800313c:	40011400 	.word	0x40011400
 8003140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003148:	2200      	movs	r2, #0
 800314a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800314e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003156:	4642      	mov	r2, r8
 8003158:	464b      	mov	r3, r9
 800315a:	1891      	adds	r1, r2, r2
 800315c:	6239      	str	r1, [r7, #32]
 800315e:	415b      	adcs	r3, r3
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
 8003162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003166:	4641      	mov	r1, r8
 8003168:	1854      	adds	r4, r2, r1
 800316a:	4649      	mov	r1, r9
 800316c:	eb43 0501 	adc.w	r5, r3, r1
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	00eb      	lsls	r3, r5, #3
 800317a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317e:	00e2      	lsls	r2, r4, #3
 8003180:	4614      	mov	r4, r2
 8003182:	461d      	mov	r5, r3
 8003184:	4643      	mov	r3, r8
 8003186:	18e3      	adds	r3, r4, r3
 8003188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800318c:	464b      	mov	r3, r9
 800318e:	eb45 0303 	adc.w	r3, r5, r3
 8003192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031b2:	4629      	mov	r1, r5
 80031b4:	008b      	lsls	r3, r1, #2
 80031b6:	4621      	mov	r1, r4
 80031b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031bc:	4621      	mov	r1, r4
 80031be:	008a      	lsls	r2, r1, #2
 80031c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031c4:	f7fd f85c 	bl	8000280 <__aeabi_uldivmod>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4b60      	ldr	r3, [pc, #384]	@ (8003350 <UART_SetConfig+0x4e4>)
 80031ce:	fba3 2302 	umull	r2, r3, r3, r2
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	011c      	lsls	r4, r3, #4
 80031d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	1891      	adds	r1, r2, r2
 80031ee:	61b9      	str	r1, [r7, #24]
 80031f0:	415b      	adcs	r3, r3
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f8:	4641      	mov	r1, r8
 80031fa:	1851      	adds	r1, r2, r1
 80031fc:	6139      	str	r1, [r7, #16]
 80031fe:	4649      	mov	r1, r9
 8003200:	414b      	adcs	r3, r1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003210:	4659      	mov	r1, fp
 8003212:	00cb      	lsls	r3, r1, #3
 8003214:	4651      	mov	r1, sl
 8003216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800321a:	4651      	mov	r1, sl
 800321c:	00ca      	lsls	r2, r1, #3
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	4603      	mov	r3, r0
 8003224:	4642      	mov	r2, r8
 8003226:	189b      	adds	r3, r3, r2
 8003228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800322c:	464b      	mov	r3, r9
 800322e:	460a      	mov	r2, r1
 8003230:	eb42 0303 	adc.w	r3, r2, r3
 8003234:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003242:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003250:	4649      	mov	r1, r9
 8003252:	008b      	lsls	r3, r1, #2
 8003254:	4641      	mov	r1, r8
 8003256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800325a:	4641      	mov	r1, r8
 800325c:	008a      	lsls	r2, r1, #2
 800325e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003262:	f7fd f80d 	bl	8000280 <__aeabi_uldivmod>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4611      	mov	r1, r2
 800326c:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <UART_SetConfig+0x4e4>)
 800326e:	fba3 2301 	umull	r2, r3, r3, r1
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2264      	movs	r2, #100	@ 0x64
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	1acb      	subs	r3, r1, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	@ 0x32
 8003280:	4a33      	ldr	r2, [pc, #204]	@ (8003350 <UART_SetConfig+0x4e4>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800328c:	441c      	add	r4, r3
 800328e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003292:	2200      	movs	r2, #0
 8003294:	673b      	str	r3, [r7, #112]	@ 0x70
 8003296:	677a      	str	r2, [r7, #116]	@ 0x74
 8003298:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800329c:	4642      	mov	r2, r8
 800329e:	464b      	mov	r3, r9
 80032a0:	1891      	adds	r1, r2, r2
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	415b      	adcs	r3, r3
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ac:	4641      	mov	r1, r8
 80032ae:	1851      	adds	r1, r2, r1
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	4649      	mov	r1, r9
 80032b4:	414b      	adcs	r3, r1
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032c4:	4659      	mov	r1, fp
 80032c6:	00cb      	lsls	r3, r1, #3
 80032c8:	4651      	mov	r1, sl
 80032ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ce:	4651      	mov	r1, sl
 80032d0:	00ca      	lsls	r2, r1, #3
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	4642      	mov	r2, r8
 80032da:	189b      	adds	r3, r3, r2
 80032dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032de:	464b      	mov	r3, r9
 80032e0:	460a      	mov	r2, r1
 80032e2:	eb42 0303 	adc.w	r3, r2, r3
 80032e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80032f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003300:	4649      	mov	r1, r9
 8003302:	008b      	lsls	r3, r1, #2
 8003304:	4641      	mov	r1, r8
 8003306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800330a:	4641      	mov	r1, r8
 800330c:	008a      	lsls	r2, r1, #2
 800330e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003312:	f7fc ffb5 	bl	8000280 <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <UART_SetConfig+0x4e4>)
 800331c:	fba3 1302 	umull	r1, r3, r3, r2
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	2164      	movs	r1, #100	@ 0x64
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	3332      	adds	r3, #50	@ 0x32
 800332e:	4a08      	ldr	r2, [pc, #32]	@ (8003350 <UART_SetConfig+0x4e4>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4422      	add	r2, r4
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800334a:	46bd      	mov	sp, r7
 800334c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003350:	51eb851f 	.word	0x51eb851f

08003354 <__NVIC_SetPriority>:
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	db0a      	blt.n	800337e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	490c      	ldr	r1, [pc, #48]	@ (80033a0 <__NVIC_SetPriority+0x4c>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	0112      	lsls	r2, r2, #4
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	440b      	add	r3, r1
 8003378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800337c:	e00a      	b.n	8003394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	4908      	ldr	r1, [pc, #32]	@ (80033a4 <__NVIC_SetPriority+0x50>)
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	3b04      	subs	r3, #4
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	440b      	add	r3, r1
 8003392:	761a      	strb	r2, [r3, #24]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000e100 	.word	0xe000e100
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80033ac:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <SysTick_Handler+0x1c>)
 80033ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80033b0:	f001 fd18 	bl	8004de4 <xTaskGetSchedulerState>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d001      	beq.n	80033be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80033ba:	f002 fb0d 	bl	80059d8 <xPortSysTickHandler>
  }
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	e000e010 	.word	0xe000e010

080033c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80033cc:	2100      	movs	r1, #0
 80033ce:	f06f 0004 	mvn.w	r0, #4
 80033d2:	f7ff ffbf 	bl	8003354 <__NVIC_SetPriority>
#endif
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033e2:	f3ef 8305 	mrs	r3, IPSR
 80033e6:	603b      	str	r3, [r7, #0]
  return(result);
 80033e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80033ee:	f06f 0305 	mvn.w	r3, #5
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	e00c      	b.n	8003410 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <osKernelInitialize+0x44>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80033fe:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <osKernelInitialize+0x44>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003404:	2300      	movs	r3, #0
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	e002      	b.n	8003410 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800340a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800340e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003410:	687b      	ldr	r3, [r7, #4]
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000174 	.word	0x20000174

08003424 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800342a:	f3ef 8305 	mrs	r3, IPSR
 800342e:	603b      	str	r3, [r7, #0]
  return(result);
 8003430:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003436:	f06f 0305 	mvn.w	r3, #5
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	e010      	b.n	8003460 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800343e:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <osKernelStart+0x48>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d109      	bne.n	800345a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003446:	f7ff ffbf 	bl	80033c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800344a:	4b08      	ldr	r3, [pc, #32]	@ (800346c <osKernelStart+0x48>)
 800344c:	2202      	movs	r2, #2
 800344e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003450:	f001 f87a 	bl	8004548 <vTaskStartScheduler>
      stat = osOK;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	e002      	b.n	8003460 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800345a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800345e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003460:	687b      	ldr	r3, [r7, #4]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000174 	.word	0x20000174

08003470 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	@ 0x38
 8003474:	af04      	add	r7, sp, #16
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003480:	f3ef 8305 	mrs	r3, IPSR
 8003484:	617b      	str	r3, [r7, #20]
  return(result);
 8003486:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003488:	2b00      	cmp	r3, #0
 800348a:	d17e      	bne.n	800358a <osThreadNew+0x11a>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d07b      	beq.n	800358a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003492:	2380      	movs	r3, #128	@ 0x80
 8003494:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003496:	2318      	movs	r3, #24
 8003498:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d045      	beq.n	8003536 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <osThreadNew+0x48>
        name = attr->name;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <osThreadNew+0x6e>
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b38      	cmp	r3, #56	@ 0x38
 80034d0:	d805      	bhi.n	80034de <osThreadNew+0x6e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <osThreadNew+0x72>
        return (NULL);
 80034de:	2300      	movs	r3, #0
 80034e0:	e054      	b.n	800358c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00e      	beq.n	8003518 <osThreadNew+0xa8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b5b      	cmp	r3, #91	@ 0x5b
 8003500:	d90a      	bls.n	8003518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <osThreadNew+0xa8>
        mem = 1;
 8003512:	2301      	movs	r3, #1
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e010      	b.n	800353a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10c      	bne.n	800353a <osThreadNew+0xca>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <osThreadNew+0xca>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <osThreadNew+0xca>
          mem = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	e001      	b.n	800353a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d110      	bne.n	8003562 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003548:	9202      	str	r2, [sp, #8]
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6a3a      	ldr	r2, [r7, #32]
 8003554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fe1a 	bl	8004190 <xTaskCreateStatic>
 800355c:	4603      	mov	r3, r0
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	e013      	b.n	800358a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d110      	bne.n	800358a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	b29a      	uxth	r2, r3
 800356c:	f107 0310 	add.w	r3, r7, #16
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fe68 	bl	8004250 <xTaskCreate>
 8003580:	4603      	mov	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d001      	beq.n	800358a <osThreadNew+0x11a>
            hTask = NULL;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800358a:	693b      	ldr	r3, [r7, #16]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3728      	adds	r7, #40	@ 0x28
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800359c:	f3ef 8305 	mrs	r3, IPSR
 80035a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80035a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <osDelay+0x1c>
    stat = osErrorISR;
 80035a8:	f06f 0305 	mvn.w	r3, #5
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e007      	b.n	80035c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 ff8e 	bl	80044dc <vTaskDelay>
    }
  }

  return (stat);
 80035c0:	68fb      	ldr	r3, [r7, #12]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a07      	ldr	r2, [pc, #28]	@ (80035f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80035dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4a06      	ldr	r2, [pc, #24]	@ (80035fc <vApplicationGetIdleTaskMemory+0x30>)
 80035e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2280      	movs	r2, #128	@ 0x80
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000178 	.word	0x20000178
 80035fc:	200001d4 	.word	0x200001d4

08003600 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a07      	ldr	r2, [pc, #28]	@ (800362c <vApplicationGetTimerTaskMemory+0x2c>)
 8003610:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4a06      	ldr	r2, [pc, #24]	@ (8003630 <vApplicationGetTimerTaskMemory+0x30>)
 8003616:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800361e:	601a      	str	r2, [r3, #0]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	200003d4 	.word	0x200003d4
 8003630:	20000430 	.word	0x20000430

08003634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f103 0208 	add.w	r2, r3, #8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800364c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f103 0208 	add.w	r2, r3, #8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f103 0208 	add.w	r2, r3, #8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ec:	d103      	bne.n	80036f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e00c      	b.n	8003710 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3308      	adds	r3, #8
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e002      	b.n	8003704 <vListInsert+0x2e>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	429a      	cmp	r2, r3
 800370e:	d2f6      	bcs.n	80036fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	601a      	str	r2, [r3, #0]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6892      	ldr	r2, [r2, #8]
 800375e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6852      	ldr	r2, [r2, #4]
 8003768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d103      	bne.n	800377c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	1e5a      	subs	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	e7fd      	b.n	80037c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037c8:	f002 f876 	bl	80058b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d4:	68f9      	ldr	r1, [r7, #12]
 80037d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f8:	3b01      	subs	r3, #1
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037fe:	fb01 f303 	mul.w	r3, r1, r3
 8003802:	441a      	add	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	22ff      	movs	r2, #255	@ 0xff
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	22ff      	movs	r2, #255	@ 0xff
 8003814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d114      	bne.n	8003848 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01a      	beq.n	800385c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3310      	adds	r3, #16
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f91a 	bl	8004a64 <xTaskRemoveFromEventList>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <xQueueGenericReset+0xd0>)
 8003838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	e009      	b.n	800385c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3310      	adds	r3, #16
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fef1 	bl	8003634 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3324      	adds	r3, #36	@ 0x24
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff feec 	bl	8003634 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800385c:	f002 f85e 	bl	800591c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003860:	2301      	movs	r3, #1
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08e      	sub	sp, #56	@ 0x38
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop
 80038b8:	e7fd      	b.n	80038b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <xQueueGenericCreateStatic+0x56>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <xQueueGenericCreateStatic+0x5a>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <xQueueGenericCreateStatic+0x5c>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	623b      	str	r3, [r7, #32]
}
 80038e2:	bf00      	nop
 80038e4:	bf00      	nop
 80038e6:	e7fd      	b.n	80038e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <xQueueGenericCreateStatic+0x84>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <xQueueGenericCreateStatic+0x88>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <xQueueGenericCreateStatic+0x8a>
 80038f8:	2300      	movs	r3, #0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	61fb      	str	r3, [r7, #28]
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	e7fd      	b.n	8003912 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003916:	2350      	movs	r3, #80	@ 0x50
 8003918:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b50      	cmp	r3, #80	@ 0x50
 800391e:	d00b      	beq.n	8003938 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	61bb      	str	r3, [r7, #24]
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003938:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800393e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800394c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f805 	bl	800396a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003962:	4618      	mov	r0, r3
 8003964:	3730      	adds	r7, #48	@ 0x30
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e002      	b.n	800398c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003998:	2101      	movs	r1, #1
 800399a:	69b8      	ldr	r0, [r7, #24]
 800399c:	f7ff fefe 	bl	800379c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08e      	sub	sp, #56	@ 0x38
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039be:	2300      	movs	r3, #0
 80039c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <xQueueGenericSend+0x34>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039de:	bf00      	nop
 80039e0:	bf00      	nop
 80039e2:	e7fd      	b.n	80039e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <xQueueGenericSend+0x42>
 80039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <xQueueGenericSend+0x46>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueGenericSend+0x48>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <xQueueGenericSend+0x64>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	e7fd      	b.n	8003a10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d103      	bne.n	8003a22 <xQueueGenericSend+0x72>
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <xQueueGenericSend+0x76>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <xQueueGenericSend+0x78>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <xQueueGenericSend+0x94>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	623b      	str	r3, [r7, #32]
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a44:	f001 f9ce 	bl	8004de4 <xTaskGetSchedulerState>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <xQueueGenericSend+0xa4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <xQueueGenericSend+0xa8>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <xQueueGenericSend+0xaa>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <xQueueGenericSend+0xc6>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	61fb      	str	r3, [r7, #28]
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	e7fd      	b.n	8003a72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a76:	f001 ff1f 	bl	80058b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <xQueueGenericSend+0xdc>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d129      	bne.n	8003ae0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a92:	f000 fa0f 	bl	8003eb4 <prvCopyDataToQueue>
 8003a96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d010      	beq.n	8003ac2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa2:	3324      	adds	r3, #36	@ 0x24
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 ffdd 	bl	8004a64 <xTaskRemoveFromEventList>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb0 <xQueueGenericSend+0x200>)
 8003ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	e00a      	b.n	8003ad8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ac8:	4b39      	ldr	r3, [pc, #228]	@ (8003bb0 <xQueueGenericSend+0x200>)
 8003aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ad8:	f001 ff20 	bl	800591c <vPortExitCritical>
				return pdPASS;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e063      	b.n	8003ba8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ae6:	f001 ff19 	bl	800591c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e05c      	b.n	8003ba8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 f817 	bl	8004b2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b02:	f001 ff0b 	bl	800591c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b06:	f000 fd87 	bl	8004618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b0a:	f001 fed5 	bl	80058b8 <vPortEnterCritical>
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b14:	b25b      	sxtb	r3, r3
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b1a:	d103      	bne.n	8003b24 <xQueueGenericSend+0x174>
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b2a:	b25b      	sxtb	r3, r3
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b30:	d103      	bne.n	8003b3a <xQueueGenericSend+0x18a>
 8003b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b3a:	f001 feef 	bl	800591c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b3e:	1d3a      	adds	r2, r7, #4
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 f806 	bl	8004b58 <xTaskCheckForTimeOut>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d124      	bne.n	8003b9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b54:	f000 faa6 	bl	80040a4 <prvIsQueueFull>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d018      	beq.n	8003b90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b60:	3310      	adds	r3, #16
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 ff2a 	bl	80049c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b6e:	f000 fa31 	bl	8003fd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b72:	f000 fd5f 	bl	8004634 <xTaskResumeAll>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f47f af7c 	bne.w	8003a76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <xQueueGenericSend+0x200>)
 8003b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	e772      	b.n	8003a76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b92:	f000 fa1f 	bl	8003fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b96:	f000 fd4d 	bl	8004634 <xTaskResumeAll>
 8003b9a:	e76c      	b.n	8003a76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b9e:	f000 fa19 	bl	8003fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ba2:	f000 fd47 	bl	8004634 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ba6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3738      	adds	r7, #56	@ 0x38
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b090      	sub	sp, #64	@ 0x40
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10b      	bne.n	8003be4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003bde:	bf00      	nop
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <xQueueGenericSendFromISR+0x3e>
 8003bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <xQueueGenericSendFromISR+0x42>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <xQueueGenericSendFromISR+0x44>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10b      	bne.n	8003c14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
 8003c12:	e7fd      	b.n	8003c10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d103      	bne.n	8003c22 <xQueueGenericSendFromISR+0x6e>
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <xQueueGenericSendFromISR+0x72>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <xQueueGenericSendFromISR+0x74>
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10b      	bne.n	8003c44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	623b      	str	r3, [r7, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
 8003c42:	e7fd      	b.n	8003c40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c44:	f001 ff18 	bl	8005a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c48:	f3ef 8211 	mrs	r2, BASEPRI
 8003c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	61fa      	str	r2, [r7, #28]
 8003c5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d302      	bcc.n	8003c76 <xQueueGenericSendFromISR+0xc2>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d12f      	bne.n	8003cd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003c8c:	f000 f912 	bl	8003eb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c98:	d112      	bne.n	8003cc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca4:	3324      	adds	r3, #36	@ 0x24
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fedc 	bl	8004a64 <xTaskRemoveFromEventList>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00e      	beq.n	8003cd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e007      	b.n	8003cd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	b25a      	sxtb	r2, r3
 8003cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003cd4:	e001      	b.n	8003cda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cdc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ce4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3740      	adds	r7, #64	@ 0x40
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	@ 0x30
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10b      	bne.n	8003d22 <xQueueReceive+0x32>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	623b      	str	r3, [r7, #32]
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	e7fd      	b.n	8003d1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d103      	bne.n	8003d30 <xQueueReceive+0x40>
 8003d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <xQueueReceive+0x44>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <xQueueReceive+0x46>
 8003d34:	2300      	movs	r3, #0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <xQueueReceive+0x62>
	__asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	61fb      	str	r3, [r7, #28]
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	e7fd      	b.n	8003d4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d52:	f001 f847 	bl	8004de4 <xTaskGetSchedulerState>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <xQueueReceive+0x72>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <xQueueReceive+0x76>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <xQueueReceive+0x78>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <xQueueReceive+0x94>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	61bb      	str	r3, [r7, #24]
}
 8003d7e:	bf00      	nop
 8003d80:	bf00      	nop
 8003d82:	e7fd      	b.n	8003d80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d84:	f001 fd98 	bl	80058b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01f      	beq.n	8003dd4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d98:	f000 f8f6 	bl	8003f88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00f      	beq.n	8003dcc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dae:	3310      	adds	r3, #16
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fe57 	bl	8004a64 <xTaskRemoveFromEventList>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8003eb0 <xQueueReceive+0x1c0>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dcc:	f001 fda6 	bl	800591c <vPortExitCritical>
				return pdPASS;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e069      	b.n	8003ea8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dda:	f001 fd9f 	bl	800591c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e062      	b.n	8003ea8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fe9d 	bl	8004b2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003df6:	f001 fd91 	bl	800591c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dfa:	f000 fc0d 	bl	8004618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dfe:	f001 fd5b 	bl	80058b8 <vPortEnterCritical>
 8003e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e0e:	d103      	bne.n	8003e18 <xQueueReceive+0x128>
 8003e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e24:	d103      	bne.n	8003e2e <xQueueReceive+0x13e>
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e2e:	f001 fd75 	bl	800591c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e32:	1d3a      	adds	r2, r7, #4
 8003e34:	f107 0310 	add.w	r3, r7, #16
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fe8c 	bl	8004b58 <xTaskCheckForTimeOut>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d123      	bne.n	8003e8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e48:	f000 f916 	bl	8004078 <prvIsQueueEmpty>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d017      	beq.n	8003e82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e54:	3324      	adds	r3, #36	@ 0x24
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fdb0 	bl	80049c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e62:	f000 f8b7 	bl	8003fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e66:	f000 fbe5 	bl	8004634 <xTaskResumeAll>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d189      	bne.n	8003d84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003e70:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb0 <xQueueReceive+0x1c0>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	e780      	b.n	8003d84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e84:	f000 f8a6 	bl	8003fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e88:	f000 fbd4 	bl	8004634 <xTaskResumeAll>
 8003e8c:	e77a      	b.n	8003d84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e90:	f000 f8a0 	bl	8003fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e94:	f000 fbce 	bl	8004634 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e9a:	f000 f8ed 	bl	8004078 <prvIsQueueEmpty>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f43f af6f 	beq.w	8003d84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ea6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3730      	adds	r7, #48	@ 0x30
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	e000ed04 	.word	0xe000ed04

08003eb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d14d      	bne.n	8003f76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 ff9e 	bl	8004e20 <xTaskPriorityDisinherit>
 8003ee4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	e043      	b.n	8003f76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d119      	bne.n	8003f28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6858      	ldr	r0, [r3, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	461a      	mov	r2, r3
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	f002 f83e 	bl	8005f80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	441a      	add	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d32b      	bcc.n	8003f76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	e026      	b.n	8003f76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68d8      	ldr	r0, [r3, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	461a      	mov	r2, r3
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	f002 f824 	bl	8005f80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	425b      	negs	r3, r3
 8003f42:	441a      	add	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d207      	bcs.n	8003f64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	425b      	negs	r3, r3
 8003f5e:	441a      	add	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d105      	bne.n	8003f76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003f7e:	697b      	ldr	r3, [r7, #20]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d018      	beq.n	8003fcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	441a      	add	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d303      	bcc.n	8003fbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68d9      	ldr	r1, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6838      	ldr	r0, [r7, #0]
 8003fc8:	f001 ffda 	bl	8005f80 <memcpy>
	}
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fdc:	f001 fc6c 	bl	80058b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe8:	e011      	b.n	800400e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d012      	beq.n	8004018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3324      	adds	r3, #36	@ 0x24
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fd34 	bl	8004a64 <xTaskRemoveFromEventList>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004002:	f000 fe0d 	bl	8004c20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	3b01      	subs	r3, #1
 800400a:	b2db      	uxtb	r3, r3
 800400c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800400e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	dce9      	bgt.n	8003fea <prvUnlockQueue+0x16>
 8004016:	e000      	b.n	800401a <prvUnlockQueue+0x46>
					break;
 8004018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	22ff      	movs	r2, #255	@ 0xff
 800401e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004022:	f001 fc7b 	bl	800591c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004026:	f001 fc47 	bl	80058b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004032:	e011      	b.n	8004058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d012      	beq.n	8004062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3310      	adds	r3, #16
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fd0f 	bl	8004a64 <xTaskRemoveFromEventList>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800404c:	f000 fde8 	bl	8004c20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004050:	7bbb      	ldrb	r3, [r7, #14]
 8004052:	3b01      	subs	r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800405c:	2b00      	cmp	r3, #0
 800405e:	dce9      	bgt.n	8004034 <prvUnlockQueue+0x60>
 8004060:	e000      	b.n	8004064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	22ff      	movs	r2, #255	@ 0xff
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800406c:	f001 fc56 	bl	800591c <vPortExitCritical>
}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004080:	f001 fc1a 	bl	80058b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800408c:	2301      	movs	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e001      	b.n	8004096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004096:	f001 fc41 	bl	800591c <vPortExitCritical>

	return xReturn;
 800409a:	68fb      	ldr	r3, [r7, #12]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040ac:	f001 fc04 	bl	80058b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d102      	bne.n	80040c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e001      	b.n	80040c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040c6:	f001 fc29 	bl	800591c <vPortExitCritical>

	return xReturn;
 80040ca:	68fb      	ldr	r3, [r7, #12]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	e014      	b.n	800410e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004124 <vQueueAddToRegistry+0x50>)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040f0:	490c      	ldr	r1, [pc, #48]	@ (8004124 <vQueueAddToRegistry+0x50>)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004124 <vQueueAddToRegistry+0x50>)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004106:	e006      	b.n	8004116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b07      	cmp	r3, #7
 8004112:	d9e7      	bls.n	80040e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000830 	.word	0x20000830

08004128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004138:	f001 fbbe 	bl	80058b8 <vPortEnterCritical>
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004142:	b25b      	sxtb	r3, r3
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004148:	d103      	bne.n	8004152 <vQueueWaitForMessageRestricted+0x2a>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004158:	b25b      	sxtb	r3, r3
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800415e:	d103      	bne.n	8004168 <vQueueWaitForMessageRestricted+0x40>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004168:	f001 fbd8 	bl	800591c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	3324      	adds	r3, #36	@ 0x24
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fc45 	bl	8004a0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004182:	6978      	ldr	r0, [r7, #20]
 8004184:	f7ff ff26 	bl	8003fd4 <prvUnlockQueue>
	}
 8004188:	bf00      	nop
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08e      	sub	sp, #56	@ 0x38
 8004194:	af04      	add	r7, sp, #16
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800419e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <xTaskCreateStatic+0x2c>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	623b      	str	r3, [r7, #32]
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <xTaskCreateStatic+0x4a>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	61fb      	str	r3, [r7, #28]
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	e7fd      	b.n	80041d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041da:	235c      	movs	r3, #92	@ 0x5c
 80041dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80041e2:	d00b      	beq.n	80041fc <xTaskCreateStatic+0x6c>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	61bb      	str	r3, [r7, #24]
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	e7fd      	b.n	80041f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01e      	beq.n	8004242 <xTaskCreateStatic+0xb2>
 8004204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01b      	beq.n	8004242 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800420a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800421c:	2300      	movs	r3, #0
 800421e:	9303      	str	r3, [sp, #12]
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	9302      	str	r3, [sp, #8]
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f850 	bl	80042da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800423a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800423c:	f000 f8de 	bl	80043fc <prvAddNewTaskToReadyList>
 8004240:	e001      	b.n	8004246 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004246:	697b      	ldr	r3, [r7, #20]
	}
 8004248:	4618      	mov	r0, r3
 800424a:	3728      	adds	r7, #40	@ 0x28
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08c      	sub	sp, #48	@ 0x30
 8004254:	af04      	add	r7, sp, #16
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4618      	mov	r0, r3
 8004266:	f001 fc49 	bl	8005afc <pvPortMalloc>
 800426a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00e      	beq.n	8004290 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004272:	205c      	movs	r0, #92	@ 0x5c
 8004274:	f001 fc42 	bl	8005afc <pvPortMalloc>
 8004278:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
 8004286:	e005      	b.n	8004294 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004288:	6978      	ldr	r0, [r7, #20]
 800428a:	f001 fd05 	bl	8005c98 <vPortFree>
 800428e:	e001      	b.n	8004294 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d017      	beq.n	80042ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	2300      	movs	r3, #0
 80042a6:	9303      	str	r3, [sp, #12]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	9302      	str	r3, [sp, #8]
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f80e 	bl	80042da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042be:	69f8      	ldr	r0, [r7, #28]
 80042c0:	f000 f89c 	bl	80043fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042c4:	2301      	movs	r3, #1
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	e002      	b.n	80042d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042d0:	69bb      	ldr	r3, [r7, #24]
	}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b088      	sub	sp, #32
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	461a      	mov	r2, r3
 80042f2:	21a5      	movs	r1, #165	@ 0xa5
 80042f4:	f001 fe10 	bl	8005f18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004302:	3b01      	subs	r3, #1
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f023 0307 	bic.w	r3, r3, #7
 8004310:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	617b      	str	r3, [r7, #20]
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	e7fd      	b.n	8004330 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01f      	beq.n	800437a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e012      	b.n	8004366 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	7819      	ldrb	r1, [r3, #0]
 8004348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	3334      	adds	r3, #52	@ 0x34
 8004350:	460a      	mov	r2, r1
 8004352:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d006      	beq.n	800436e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	3301      	adds	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	2b0f      	cmp	r3, #15
 800436a:	d9e9      	bls.n	8004340 <prvInitialiseNewTask+0x66>
 800436c:	e000      	b.n	8004370 <prvInitialiseNewTask+0x96>
			{
				break;
 800436e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004378:	e003      	b.n	8004382 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	2b37      	cmp	r3, #55	@ 0x37
 8004386:	d901      	bls.n	800438c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004388:	2337      	movs	r3, #55	@ 0x37
 800438a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800438c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004390:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004396:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	2200      	movs	r2, #0
 800439c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	3304      	adds	r3, #4
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff f966 	bl	8003674 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	3318      	adds	r3, #24
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff f961 	bl	8003674 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	2200      	movs	r2, #0
 80043cc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	68f9      	ldr	r1, [r7, #12]
 80043da:	69b8      	ldr	r0, [r7, #24]
 80043dc:	f001 f93e 	bl	800565c <pxPortInitialiseStack>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043f2:	bf00      	nop
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004404:	f001 fa58 	bl	80058b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004408:	4b2d      	ldr	r3, [pc, #180]	@ (80044c0 <prvAddNewTaskToReadyList+0xc4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3301      	adds	r3, #1
 800440e:	4a2c      	ldr	r2, [pc, #176]	@ (80044c0 <prvAddNewTaskToReadyList+0xc4>)
 8004410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004412:	4b2c      	ldr	r3, [pc, #176]	@ (80044c4 <prvAddNewTaskToReadyList+0xc8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800441a:	4a2a      	ldr	r2, [pc, #168]	@ (80044c4 <prvAddNewTaskToReadyList+0xc8>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004420:	4b27      	ldr	r3, [pc, #156]	@ (80044c0 <prvAddNewTaskToReadyList+0xc4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d110      	bne.n	800444a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004428:	f000 fc1e 	bl	8004c68 <prvInitialiseTaskLists>
 800442c:	e00d      	b.n	800444a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800442e:	4b26      	ldr	r3, [pc, #152]	@ (80044c8 <prvAddNewTaskToReadyList+0xcc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004436:	4b23      	ldr	r3, [pc, #140]	@ (80044c4 <prvAddNewTaskToReadyList+0xc8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004440:	429a      	cmp	r2, r3
 8004442:	d802      	bhi.n	800444a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004444:	4a1f      	ldr	r2, [pc, #124]	@ (80044c4 <prvAddNewTaskToReadyList+0xc8>)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800444a:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <prvAddNewTaskToReadyList+0xd0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3301      	adds	r3, #1
 8004450:	4a1e      	ldr	r2, [pc, #120]	@ (80044cc <prvAddNewTaskToReadyList+0xd0>)
 8004452:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004454:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <prvAddNewTaskToReadyList+0xd0>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004460:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <prvAddNewTaskToReadyList+0xd4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d903      	bls.n	8004470 <prvAddNewTaskToReadyList+0x74>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	4a18      	ldr	r2, [pc, #96]	@ (80044d0 <prvAddNewTaskToReadyList+0xd4>)
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4a15      	ldr	r2, [pc, #84]	@ (80044d4 <prvAddNewTaskToReadyList+0xd8>)
 800447e:	441a      	add	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	4619      	mov	r1, r3
 8004486:	4610      	mov	r0, r2
 8004488:	f7ff f901 	bl	800368e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800448c:	f001 fa46 	bl	800591c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004490:	4b0d      	ldr	r3, [pc, #52]	@ (80044c8 <prvAddNewTaskToReadyList+0xcc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004498:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <prvAddNewTaskToReadyList+0xc8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d207      	bcs.n	80044b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044a6:	4b0c      	ldr	r3, [pc, #48]	@ (80044d8 <prvAddNewTaskToReadyList+0xdc>)
 80044a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000d44 	.word	0x20000d44
 80044c4:	20000870 	.word	0x20000870
 80044c8:	20000d50 	.word	0x20000d50
 80044cc:	20000d60 	.word	0x20000d60
 80044d0:	20000d4c 	.word	0x20000d4c
 80044d4:	20000874 	.word	0x20000874
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d018      	beq.n	8004520 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044ee:	4b14      	ldr	r3, [pc, #80]	@ (8004540 <vTaskDelay+0x64>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <vTaskDelay+0x32>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	60bb      	str	r3, [r7, #8]
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	e7fd      	b.n	800450a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800450e:	f000 f883 	bl	8004618 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004512:	2100      	movs	r1, #0
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fcf3 	bl	8004f00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800451a:	f000 f88b 	bl	8004634 <xTaskResumeAll>
 800451e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d107      	bne.n	8004536 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004526:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <vTaskDelay+0x68>)
 8004528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000d6c 	.word	0x20000d6c
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	@ 0x28
 800454c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004556:	463a      	mov	r2, r7
 8004558:	1d39      	adds	r1, r7, #4
 800455a:	f107 0308 	add.w	r3, r7, #8
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff f834 	bl	80035cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004564:	6839      	ldr	r1, [r7, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	9202      	str	r2, [sp, #8]
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	2300      	movs	r3, #0
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	460a      	mov	r2, r1
 8004576:	4922      	ldr	r1, [pc, #136]	@ (8004600 <vTaskStartScheduler+0xb8>)
 8004578:	4822      	ldr	r0, [pc, #136]	@ (8004604 <vTaskStartScheduler+0xbc>)
 800457a:	f7ff fe09 	bl	8004190 <xTaskCreateStatic>
 800457e:	4603      	mov	r3, r0
 8004580:	4a21      	ldr	r2, [pc, #132]	@ (8004608 <vTaskStartScheduler+0xc0>)
 8004582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004584:	4b20      	ldr	r3, [pc, #128]	@ (8004608 <vTaskStartScheduler+0xc0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800458c:	2301      	movs	r3, #1
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	e001      	b.n	8004596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d102      	bne.n	80045a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800459c:	f000 fd04 	bl	8004fa8 <xTimerCreateTimerTask>
 80045a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d116      	bne.n	80045d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	613b      	str	r3, [r7, #16]
}
 80045ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045bc:	4b13      	ldr	r3, [pc, #76]	@ (800460c <vTaskStartScheduler+0xc4>)
 80045be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045c4:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <vTaskStartScheduler+0xc8>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045ca:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <vTaskStartScheduler+0xcc>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045d0:	f001 f8ce 	bl	8005770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045d4:	e00f      	b.n	80045f6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045dc:	d10b      	bne.n	80045f6 <vTaskStartScheduler+0xae>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60fb      	str	r3, [r7, #12]
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <vTaskStartScheduler+0xaa>
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	08006874 	.word	0x08006874
 8004604:	08004c39 	.word	0x08004c39
 8004608:	20000d68 	.word	0x20000d68
 800460c:	20000d64 	.word	0x20000d64
 8004610:	20000d50 	.word	0x20000d50
 8004614:	20000d48 	.word	0x20000d48

08004618 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800461c:	4b04      	ldr	r3, [pc, #16]	@ (8004630 <vTaskSuspendAll+0x18>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	4a03      	ldr	r2, [pc, #12]	@ (8004630 <vTaskSuspendAll+0x18>)
 8004624:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	20000d6c 	.word	0x20000d6c

08004634 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004642:	4b42      	ldr	r3, [pc, #264]	@ (800474c <xTaskResumeAll+0x118>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <xTaskResumeAll+0x2e>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004662:	f001 f929 	bl	80058b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004666:	4b39      	ldr	r3, [pc, #228]	@ (800474c <xTaskResumeAll+0x118>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3b01      	subs	r3, #1
 800466c:	4a37      	ldr	r2, [pc, #220]	@ (800474c <xTaskResumeAll+0x118>)
 800466e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004670:	4b36      	ldr	r3, [pc, #216]	@ (800474c <xTaskResumeAll+0x118>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d162      	bne.n	800473e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004678:	4b35      	ldr	r3, [pc, #212]	@ (8004750 <xTaskResumeAll+0x11c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d05e      	beq.n	800473e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004680:	e02f      	b.n	80046e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004682:	4b34      	ldr	r3, [pc, #208]	@ (8004754 <xTaskResumeAll+0x120>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3318      	adds	r3, #24
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f85a 	bl	8003748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3304      	adds	r3, #4
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff f855 	bl	8003748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004758 <xTaskResumeAll+0x124>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d903      	bls.n	80046b2 <xTaskResumeAll+0x7e>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004758 <xTaskResumeAll+0x124>)
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4a27      	ldr	r2, [pc, #156]	@ (800475c <xTaskResumeAll+0x128>)
 80046c0:	441a      	add	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f7fe ffe0 	bl	800368e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d2:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <xTaskResumeAll+0x12c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	429a      	cmp	r2, r3
 80046da:	d302      	bcc.n	80046e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80046dc:	4b21      	ldr	r3, [pc, #132]	@ (8004764 <xTaskResumeAll+0x130>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004754 <xTaskResumeAll+0x120>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1cb      	bne.n	8004682 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046f0:	f000 fb58 	bl	8004da4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80046f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004768 <xTaskResumeAll+0x134>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004700:	f000 f846 	bl	8004790 <xTaskIncrementTick>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800470a:	4b16      	ldr	r3, [pc, #88]	@ (8004764 <xTaskResumeAll+0x130>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3b01      	subs	r3, #1
 8004714:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f1      	bne.n	8004700 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800471c:	4b12      	ldr	r3, [pc, #72]	@ (8004768 <xTaskResumeAll+0x134>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004722:	4b10      	ldr	r3, [pc, #64]	@ (8004764 <xTaskResumeAll+0x130>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800472a:	2301      	movs	r3, #1
 800472c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800472e:	4b0f      	ldr	r3, [pc, #60]	@ (800476c <xTaskResumeAll+0x138>)
 8004730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800473e:	f001 f8ed 	bl	800591c <vPortExitCritical>

	return xAlreadyYielded;
 8004742:	68bb      	ldr	r3, [r7, #8]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000d6c 	.word	0x20000d6c
 8004750:	20000d44 	.word	0x20000d44
 8004754:	20000d04 	.word	0x20000d04
 8004758:	20000d4c 	.word	0x20000d4c
 800475c:	20000874 	.word	0x20000874
 8004760:	20000870 	.word	0x20000870
 8004764:	20000d58 	.word	0x20000d58
 8004768:	20000d54 	.word	0x20000d54
 800476c:	e000ed04 	.word	0xe000ed04

08004770 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004776:	4b05      	ldr	r3, [pc, #20]	@ (800478c <xTaskGetTickCount+0x1c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800477c:	687b      	ldr	r3, [r7, #4]
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20000d48 	.word	0x20000d48

08004790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800479a:	4b4f      	ldr	r3, [pc, #316]	@ (80048d8 <xTaskIncrementTick+0x148>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 8090 	bne.w	80048c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047a4:	4b4d      	ldr	r3, [pc, #308]	@ (80048dc <xTaskIncrementTick+0x14c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047ac:	4a4b      	ldr	r2, [pc, #300]	@ (80048dc <xTaskIncrementTick+0x14c>)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d121      	bne.n	80047fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80047b8:	4b49      	ldr	r3, [pc, #292]	@ (80048e0 <xTaskIncrementTick+0x150>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <xTaskIncrementTick+0x4a>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	603b      	str	r3, [r7, #0]
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	e7fd      	b.n	80047d6 <xTaskIncrementTick+0x46>
 80047da:	4b41      	ldr	r3, [pc, #260]	@ (80048e0 <xTaskIncrementTick+0x150>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	4b40      	ldr	r3, [pc, #256]	@ (80048e4 <xTaskIncrementTick+0x154>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a3e      	ldr	r2, [pc, #248]	@ (80048e0 <xTaskIncrementTick+0x150>)
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	4a3e      	ldr	r2, [pc, #248]	@ (80048e4 <xTaskIncrementTick+0x154>)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	4b3e      	ldr	r3, [pc, #248]	@ (80048e8 <xTaskIncrementTick+0x158>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3301      	adds	r3, #1
 80047f4:	4a3c      	ldr	r2, [pc, #240]	@ (80048e8 <xTaskIncrementTick+0x158>)
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	f000 fad4 	bl	8004da4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047fc:	4b3b      	ldr	r3, [pc, #236]	@ (80048ec <xTaskIncrementTick+0x15c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	429a      	cmp	r2, r3
 8004804:	d349      	bcc.n	800489a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004806:	4b36      	ldr	r3, [pc, #216]	@ (80048e0 <xTaskIncrementTick+0x150>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d104      	bne.n	800481a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004810:	4b36      	ldr	r3, [pc, #216]	@ (80048ec <xTaskIncrementTick+0x15c>)
 8004812:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004816:	601a      	str	r2, [r3, #0]
					break;
 8004818:	e03f      	b.n	800489a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800481a:	4b31      	ldr	r3, [pc, #196]	@ (80048e0 <xTaskIncrementTick+0x150>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	429a      	cmp	r2, r3
 8004830:	d203      	bcs.n	800483a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004832:	4a2e      	ldr	r2, [pc, #184]	@ (80048ec <xTaskIncrementTick+0x15c>)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004838:	e02f      	b.n	800489a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	3304      	adds	r3, #4
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe ff82 	bl	8003748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3318      	adds	r3, #24
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe ff79 	bl	8003748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485a:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <xTaskIncrementTick+0x160>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d903      	bls.n	800486a <xTaskIncrementTick+0xda>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	4a22      	ldr	r2, [pc, #136]	@ (80048f0 <xTaskIncrementTick+0x160>)
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4a1f      	ldr	r2, [pc, #124]	@ (80048f4 <xTaskIncrementTick+0x164>)
 8004878:	441a      	add	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f7fe ff04 	bl	800368e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488a:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <xTaskIncrementTick+0x168>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	429a      	cmp	r2, r3
 8004892:	d3b8      	bcc.n	8004806 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004894:	2301      	movs	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004898:	e7b5      	b.n	8004806 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800489a:	4b17      	ldr	r3, [pc, #92]	@ (80048f8 <xTaskIncrementTick+0x168>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a0:	4914      	ldr	r1, [pc, #80]	@ (80048f4 <xTaskIncrementTick+0x164>)
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d901      	bls.n	80048b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80048b2:	2301      	movs	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048b6:	4b11      	ldr	r3, [pc, #68]	@ (80048fc <xTaskIncrementTick+0x16c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80048be:	2301      	movs	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e004      	b.n	80048ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004900 <xTaskIncrementTick+0x170>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004900 <xTaskIncrementTick+0x170>)
 80048cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048ce:	697b      	ldr	r3, [r7, #20]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20000d6c 	.word	0x20000d6c
 80048dc:	20000d48 	.word	0x20000d48
 80048e0:	20000cfc 	.word	0x20000cfc
 80048e4:	20000d00 	.word	0x20000d00
 80048e8:	20000d5c 	.word	0x20000d5c
 80048ec:	20000d64 	.word	0x20000d64
 80048f0:	20000d4c 	.word	0x20000d4c
 80048f4:	20000874 	.word	0x20000874
 80048f8:	20000870 	.word	0x20000870
 80048fc:	20000d58 	.word	0x20000d58
 8004900:	20000d54 	.word	0x20000d54

08004904 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800490a:	4b28      	ldr	r3, [pc, #160]	@ (80049ac <vTaskSwitchContext+0xa8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004912:	4b27      	ldr	r3, [pc, #156]	@ (80049b0 <vTaskSwitchContext+0xac>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004918:	e042      	b.n	80049a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800491a:	4b25      	ldr	r3, [pc, #148]	@ (80049b0 <vTaskSwitchContext+0xac>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004920:	4b24      	ldr	r3, [pc, #144]	@ (80049b4 <vTaskSwitchContext+0xb0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e011      	b.n	800494c <vTaskSwitchContext+0x48>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <vTaskSwitchContext+0x42>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	607b      	str	r3, [r7, #4]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <vTaskSwitchContext+0x3e>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b01      	subs	r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	491a      	ldr	r1, [pc, #104]	@ (80049b8 <vTaskSwitchContext+0xb4>)
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0e3      	beq.n	8004928 <vTaskSwitchContext+0x24>
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4a13      	ldr	r2, [pc, #76]	@ (80049b8 <vTaskSwitchContext+0xb4>)
 800496c:	4413      	add	r3, r2
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3308      	adds	r3, #8
 8004982:	429a      	cmp	r2, r3
 8004984:	d104      	bne.n	8004990 <vTaskSwitchContext+0x8c>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	605a      	str	r2, [r3, #4]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <vTaskSwitchContext+0xb8>)
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4a06      	ldr	r2, [pc, #24]	@ (80049b4 <vTaskSwitchContext+0xb0>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6013      	str	r3, [r2, #0]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	20000d6c 	.word	0x20000d6c
 80049b0:	20000d58 	.word	0x20000d58
 80049b4:	20000d4c 	.word	0x20000d4c
 80049b8:	20000874 	.word	0x20000874
 80049bc:	20000870 	.word	0x20000870

080049c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10b      	bne.n	80049e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	60fb      	str	r3, [r7, #12]
}
 80049e2:	bf00      	nop
 80049e4:	bf00      	nop
 80049e6:	e7fd      	b.n	80049e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049e8:	4b07      	ldr	r3, [pc, #28]	@ (8004a08 <vTaskPlaceOnEventList+0x48>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3318      	adds	r3, #24
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fe fe70 	bl	80036d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049f6:	2101      	movs	r1, #1
 80049f8:	6838      	ldr	r0, [r7, #0]
 80049fa:	f000 fa81 	bl	8004f00 <prvAddCurrentTaskToDelayedList>
}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000870 	.word	0x20000870

08004a0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	617b      	str	r3, [r7, #20]
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a36:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3318      	adds	r3, #24
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7fe fe25 	bl	800368e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	68b8      	ldr	r0, [r7, #8]
 8004a54:	f000 fa54 	bl	8004f00 <prvAddCurrentTaskToDelayedList>
	}
 8004a58:	bf00      	nop
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20000870 	.word	0x20000870

08004a64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	60fb      	str	r3, [r7, #12]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	3318      	adds	r3, #24
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fe56 	bl	8003748 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <xTaskRemoveFromEventList+0xb0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d11d      	bne.n	8004ae0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe fe4d 	bl	8003748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab2:	4b19      	ldr	r3, [pc, #100]	@ (8004b18 <xTaskRemoveFromEventList+0xb4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d903      	bls.n	8004ac2 <xTaskRemoveFromEventList+0x5e>
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	4a16      	ldr	r2, [pc, #88]	@ (8004b18 <xTaskRemoveFromEventList+0xb4>)
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4a13      	ldr	r2, [pc, #76]	@ (8004b1c <xTaskRemoveFromEventList+0xb8>)
 8004ad0:	441a      	add	r2, r3
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f7fe fdd8 	bl	800368e <vListInsertEnd>
 8004ade:	e005      	b.n	8004aec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	3318      	adds	r3, #24
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	480e      	ldr	r0, [pc, #56]	@ (8004b20 <xTaskRemoveFromEventList+0xbc>)
 8004ae8:	f7fe fdd1 	bl	800368e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <xTaskRemoveFromEventList+0xc0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d905      	bls.n	8004b06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004afa:	2301      	movs	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004afe:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <xTaskRemoveFromEventList+0xc4>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e001      	b.n	8004b0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b0a:	697b      	ldr	r3, [r7, #20]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000d6c 	.word	0x20000d6c
 8004b18:	20000d4c 	.word	0x20000d4c
 8004b1c:	20000874 	.word	0x20000874
 8004b20:	20000d04 	.word	0x20000d04
 8004b24:	20000870 	.word	0x20000870
 8004b28:	20000d58 	.word	0x20000d58

08004b2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b34:	4b06      	ldr	r3, [pc, #24]	@ (8004b50 <vTaskInternalSetTimeOutState+0x24>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b3c:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <vTaskInternalSetTimeOutState+0x28>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	605a      	str	r2, [r3, #4]
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	20000d5c 	.word	0x20000d5c
 8004b54:	20000d48 	.word	0x20000d48

08004b58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	613b      	str	r3, [r7, #16]
}
 8004b7a:	bf00      	nop
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60fb      	str	r3, [r7, #12]
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	e7fd      	b.n	8004b9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004b9e:	f000 fe8b 	bl	80058b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c18 <xTaskCheckForTimeOut+0xc0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bba:	d102      	bne.n	8004bc2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	e023      	b.n	8004c0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <xTaskCheckForTimeOut+0xc4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d007      	beq.n	8004bde <xTaskCheckForTimeOut+0x86>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d302      	bcc.n	8004bde <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	61fb      	str	r3, [r7, #28]
 8004bdc:	e015      	b.n	8004c0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d20b      	bcs.n	8004c00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad2      	subs	r2, r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff99 	bl	8004b2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	e004      	b.n	8004c0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c06:	2301      	movs	r3, #1
 8004c08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c0a:	f000 fe87 	bl	800591c <vPortExitCritical>

	return xReturn;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000d48 	.word	0x20000d48
 8004c1c:	20000d5c 	.word	0x20000d5c

08004c20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c24:	4b03      	ldr	r3, [pc, #12]	@ (8004c34 <vTaskMissedYield+0x14>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	20000d58 	.word	0x20000d58

08004c38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c40:	f000 f852 	bl	8004ce8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c44:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <prvIdleTask+0x28>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d9f9      	bls.n	8004c40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c4c:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <prvIdleTask+0x2c>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c5c:	e7f0      	b.n	8004c40 <prvIdleTask+0x8>
 8004c5e:	bf00      	nop
 8004c60:	20000874 	.word	0x20000874
 8004c64:	e000ed04 	.word	0xe000ed04

08004c68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c6e:	2300      	movs	r3, #0
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	e00c      	b.n	8004c8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4a12      	ldr	r2, [pc, #72]	@ (8004cc8 <prvInitialiseTaskLists+0x60>)
 8004c80:	4413      	add	r3, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fcd6 	bl	8003634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b37      	cmp	r3, #55	@ 0x37
 8004c92:	d9ef      	bls.n	8004c74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c94:	480d      	ldr	r0, [pc, #52]	@ (8004ccc <prvInitialiseTaskLists+0x64>)
 8004c96:	f7fe fccd 	bl	8003634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c9a:	480d      	ldr	r0, [pc, #52]	@ (8004cd0 <prvInitialiseTaskLists+0x68>)
 8004c9c:	f7fe fcca 	bl	8003634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ca0:	480c      	ldr	r0, [pc, #48]	@ (8004cd4 <prvInitialiseTaskLists+0x6c>)
 8004ca2:	f7fe fcc7 	bl	8003634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ca6:	480c      	ldr	r0, [pc, #48]	@ (8004cd8 <prvInitialiseTaskLists+0x70>)
 8004ca8:	f7fe fcc4 	bl	8003634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cac:	480b      	ldr	r0, [pc, #44]	@ (8004cdc <prvInitialiseTaskLists+0x74>)
 8004cae:	f7fe fcc1 	bl	8003634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <prvInitialiseTaskLists+0x78>)
 8004cb4:	4a05      	ldr	r2, [pc, #20]	@ (8004ccc <prvInitialiseTaskLists+0x64>)
 8004cb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <prvInitialiseTaskLists+0x7c>)
 8004cba:	4a05      	ldr	r2, [pc, #20]	@ (8004cd0 <prvInitialiseTaskLists+0x68>)
 8004cbc:	601a      	str	r2, [r3, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000874 	.word	0x20000874
 8004ccc:	20000cd4 	.word	0x20000cd4
 8004cd0:	20000ce8 	.word	0x20000ce8
 8004cd4:	20000d04 	.word	0x20000d04
 8004cd8:	20000d18 	.word	0x20000d18
 8004cdc:	20000d30 	.word	0x20000d30
 8004ce0:	20000cfc 	.word	0x20000cfc
 8004ce4:	20000d00 	.word	0x20000d00

08004ce8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cee:	e019      	b.n	8004d24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cf0:	f000 fde2 	bl	80058b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf4:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <prvCheckTasksWaitingTermination+0x50>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe fd21 	bl	8003748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <prvCheckTasksWaitingTermination+0x54>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d3c <prvCheckTasksWaitingTermination+0x54>)
 8004d0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d10:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <prvCheckTasksWaitingTermination+0x58>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	4a0a      	ldr	r2, [pc, #40]	@ (8004d40 <prvCheckTasksWaitingTermination+0x58>)
 8004d18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d1a:	f000 fdff 	bl	800591c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f810 	bl	8004d44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d24:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <prvCheckTasksWaitingTermination+0x58>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e1      	bne.n	8004cf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000d18 	.word	0x20000d18
 8004d3c:	20000d44 	.word	0x20000d44
 8004d40:	20000d2c 	.word	0x20000d2c

08004d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d108      	bne.n	8004d68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 ff9c 	bl	8005c98 <vPortFree>
				vPortFree( pxTCB );
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 ff99 	bl	8005c98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d66:	e019      	b.n	8004d9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d103      	bne.n	8004d7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 ff90 	bl	8005c98 <vPortFree>
	}
 8004d78:	e010      	b.n	8004d9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d00b      	beq.n	8004d9c <prvDeleteTCB+0x58>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60fb      	str	r3, [r7, #12]
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <prvDeleteTCB+0x54>
	}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004daa:	4b0c      	ldr	r3, [pc, #48]	@ (8004ddc <prvResetNextTaskUnblockTime+0x38>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004db4:	4b0a      	ldr	r3, [pc, #40]	@ (8004de0 <prvResetNextTaskUnblockTime+0x3c>)
 8004db6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004dba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004dbc:	e008      	b.n	8004dd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dbe:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <prvResetNextTaskUnblockTime+0x38>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4a04      	ldr	r2, [pc, #16]	@ (8004de0 <prvResetNextTaskUnblockTime+0x3c>)
 8004dce:	6013      	str	r3, [r2, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	20000cfc 	.word	0x20000cfc
 8004de0:	20000d64 	.word	0x20000d64

08004de4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004dea:	4b0b      	ldr	r3, [pc, #44]	@ (8004e18 <xTaskGetSchedulerState+0x34>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004df2:	2301      	movs	r3, #1
 8004df4:	607b      	str	r3, [r7, #4]
 8004df6:	e008      	b.n	8004e0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004df8:	4b08      	ldr	r3, [pc, #32]	@ (8004e1c <xTaskGetSchedulerState+0x38>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e00:	2302      	movs	r3, #2
 8004e02:	607b      	str	r3, [r7, #4]
 8004e04:	e001      	b.n	8004e0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e06:	2300      	movs	r3, #0
 8004e08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e0a:	687b      	ldr	r3, [r7, #4]
	}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	20000d50 	.word	0x20000d50
 8004e1c:	20000d6c 	.word	0x20000d6c

08004e20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d058      	beq.n	8004ee8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e36:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef4 <xTaskPriorityDisinherit+0xd4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d00b      	beq.n	8004e58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	60fb      	str	r3, [r7, #12]
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	e7fd      	b.n	8004e54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10b      	bne.n	8004e78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	60bb      	str	r3, [r7, #8]
}
 8004e72:	bf00      	nop
 8004e74:	bf00      	nop
 8004e76:	e7fd      	b.n	8004e74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7c:	1e5a      	subs	r2, r3, #1
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d02c      	beq.n	8004ee8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d128      	bne.n	8004ee8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fc54 	bl	8003748 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef8 <xTaskPriorityDisinherit+0xd8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d903      	bls.n	8004ec8 <xTaskPriorityDisinherit+0xa8>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef8 <xTaskPriorityDisinherit+0xd8>)
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4a09      	ldr	r2, [pc, #36]	@ (8004efc <xTaskPriorityDisinherit+0xdc>)
 8004ed6:	441a      	add	r2, r3
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7fe fbd5 	bl	800368e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ee8:	697b      	ldr	r3, [r7, #20]
	}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000870 	.word	0x20000870
 8004ef8:	20000d4c 	.word	0x20000d4c
 8004efc:	20000874 	.word	0x20000874

08004f00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f0a:	4b21      	ldr	r3, [pc, #132]	@ (8004f90 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f10:	4b20      	ldr	r3, [pc, #128]	@ (8004f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fc16 	bl	8003748 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f22:	d10a      	bne.n	8004f3a <prvAddCurrentTaskToDelayedList+0x3a>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4819      	ldr	r0, [pc, #100]	@ (8004f98 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f34:	f7fe fbab 	bl	800368e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f38:	e026      	b.n	8004f88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4413      	add	r3, r2
 8004f40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f42:	4b14      	ldr	r3, [pc, #80]	@ (8004f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d209      	bcs.n	8004f66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f52:	4b12      	ldr	r3, [pc, #72]	@ (8004f9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b0f      	ldr	r3, [pc, #60]	@ (8004f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7fe fbb9 	bl	80036d6 <vListInsert>
}
 8004f64:	e010      	b.n	8004f88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f66:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f7fe fbaf 	bl	80036d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f78:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d202      	bcs.n	8004f88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f82:	4a08      	ldr	r2, [pc, #32]	@ (8004fa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6013      	str	r3, [r2, #0]
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20000d48 	.word	0x20000d48
 8004f94:	20000870 	.word	0x20000870
 8004f98:	20000d30 	.word	0x20000d30
 8004f9c:	20000d00 	.word	0x20000d00
 8004fa0:	20000cfc 	.word	0x20000cfc
 8004fa4:	20000d64 	.word	0x20000d64

08004fa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	@ 0x28
 8004fac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004fb2:	f000 fb13 	bl	80055dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <xTimerCreateTimerTask+0x84>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d021      	beq.n	8005002 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004fc6:	1d3a      	adds	r2, r7, #4
 8004fc8:	f107 0108 	add.w	r1, r7, #8
 8004fcc:	f107 030c 	add.w	r3, r7, #12
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe fb15 	bl	8003600 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	9202      	str	r2, [sp, #8]
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	460a      	mov	r2, r1
 8004fe8:	4911      	ldr	r1, [pc, #68]	@ (8005030 <xTimerCreateTimerTask+0x88>)
 8004fea:	4812      	ldr	r0, [pc, #72]	@ (8005034 <xTimerCreateTimerTask+0x8c>)
 8004fec:	f7ff f8d0 	bl	8004190 <xTaskCreateStatic>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4a11      	ldr	r2, [pc, #68]	@ (8005038 <xTimerCreateTimerTask+0x90>)
 8004ff4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ff6:	4b10      	ldr	r3, [pc, #64]	@ (8005038 <xTimerCreateTimerTask+0x90>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ffe:	2301      	movs	r3, #1
 8005000:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	613b      	str	r3, [r7, #16]
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005020:	697b      	ldr	r3, [r7, #20]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000da0 	.word	0x20000da0
 8005030:	0800687c 	.word	0x0800687c
 8005034:	08005175 	.word	0x08005175
 8005038:	20000da4 	.word	0x20000da4

0800503c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	@ 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800504a:	2300      	movs	r3, #0
 800504c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10b      	bne.n	800506c <xTimerGenericCommand+0x30>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	623b      	str	r3, [r7, #32]
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	e7fd      	b.n	8005068 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800506c:	4b19      	ldr	r3, [pc, #100]	@ (80050d4 <xTimerGenericCommand+0x98>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d02a      	beq.n	80050ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b05      	cmp	r3, #5
 8005084:	dc18      	bgt.n	80050b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005086:	f7ff fead 	bl	8004de4 <xTaskGetSchedulerState>
 800508a:	4603      	mov	r3, r0
 800508c:	2b02      	cmp	r3, #2
 800508e:	d109      	bne.n	80050a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005090:	4b10      	ldr	r3, [pc, #64]	@ (80050d4 <xTimerGenericCommand+0x98>)
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	f107 0110 	add.w	r1, r7, #16
 8005098:	2300      	movs	r3, #0
 800509a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800509c:	f7fe fc88 	bl	80039b0 <xQueueGenericSend>
 80050a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80050a2:	e012      	b.n	80050ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050a4:	4b0b      	ldr	r3, [pc, #44]	@ (80050d4 <xTimerGenericCommand+0x98>)
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	f107 0110 	add.w	r1, r7, #16
 80050ac:	2300      	movs	r3, #0
 80050ae:	2200      	movs	r2, #0
 80050b0:	f7fe fc7e 	bl	80039b0 <xQueueGenericSend>
 80050b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80050b6:	e008      	b.n	80050ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050b8:	4b06      	ldr	r3, [pc, #24]	@ (80050d4 <xTimerGenericCommand+0x98>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	f107 0110 	add.w	r1, r7, #16
 80050c0:	2300      	movs	r3, #0
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	f7fe fd76 	bl	8003bb4 <xQueueGenericSendFromISR>
 80050c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3728      	adds	r7, #40	@ 0x28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000da0 	.word	0x20000da0

080050d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e2:	4b23      	ldr	r3, [pc, #140]	@ (8005170 <prvProcessExpiredTimer+0x98>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe fb29 	bl	8003748 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d023      	beq.n	800514c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	18d1      	adds	r1, r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	6978      	ldr	r0, [r7, #20]
 8005112:	f000 f8d5 	bl	80052c0 <prvInsertTimerInActiveList>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800511c:	2300      	movs	r3, #0
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2300      	movs	r3, #0
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	2100      	movs	r1, #0
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	f7ff ff88 	bl	800503c <xTimerGenericCommand>
 800512c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d114      	bne.n	800515e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	60fb      	str	r3, [r7, #12]
}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	e7fd      	b.n	8005148 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	b2da      	uxtb	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	6978      	ldr	r0, [r7, #20]
 8005164:	4798      	blx	r3
}
 8005166:	bf00      	nop
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000d98 	.word	0x20000d98

08005174 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800517c:	f107 0308 	add.w	r3, r7, #8
 8005180:	4618      	mov	r0, r3
 8005182:	f000 f859 	bl	8005238 <prvGetNextExpireTime>
 8005186:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4619      	mov	r1, r3
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f805 	bl	800519c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005192:	f000 f8d7 	bl	8005344 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005196:	bf00      	nop
 8005198:	e7f0      	b.n	800517c <prvTimerTask+0x8>
	...

0800519c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051a6:	f7ff fa37 	bl	8004618 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f866 	bl	8005280 <prvSampleTimeNow>
 80051b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d130      	bne.n	800521e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <prvProcessTimerOrBlockTask+0x3c>
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d806      	bhi.n	80051d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80051ca:	f7ff fa33 	bl	8004634 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff ff81 	bl	80050d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051d6:	e024      	b.n	8005222 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051de:	4b13      	ldr	r3, [pc, #76]	@ (800522c <prvProcessTimerOrBlockTask+0x90>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <prvProcessTimerOrBlockTask+0x50>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <prvProcessTimerOrBlockTask+0x52>
 80051ec:	2300      	movs	r3, #0
 80051ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005230 <prvProcessTimerOrBlockTask+0x94>)
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	4619      	mov	r1, r3
 80051fe:	f7fe ff93 	bl	8004128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005202:	f7ff fa17 	bl	8004634 <xTaskResumeAll>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800520c:	4b09      	ldr	r3, [pc, #36]	@ (8005234 <prvProcessTimerOrBlockTask+0x98>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	f3bf 8f6f 	isb	sy
}
 800521c:	e001      	b.n	8005222 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800521e:	f7ff fa09 	bl	8004634 <xTaskResumeAll>
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000d9c 	.word	0x20000d9c
 8005230:	20000da0 	.word	0x20000da0
 8005234:	e000ed04 	.word	0xe000ed04

08005238 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005240:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <prvGetNextExpireTime+0x44>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <prvGetNextExpireTime+0x16>
 800524a:	2201      	movs	r2, #1
 800524c:	e000      	b.n	8005250 <prvGetNextExpireTime+0x18>
 800524e:	2200      	movs	r2, #0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800525c:	4b07      	ldr	r3, [pc, #28]	@ (800527c <prvGetNextExpireTime+0x44>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	e001      	b.n	800526c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800526c:	68fb      	ldr	r3, [r7, #12]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000d98 	.word	0x20000d98

08005280 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005288:	f7ff fa72 	bl	8004770 <xTaskGetTickCount>
 800528c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800528e:	4b0b      	ldr	r3, [pc, #44]	@ (80052bc <prvSampleTimeNow+0x3c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	429a      	cmp	r2, r3
 8005296:	d205      	bcs.n	80052a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005298:	f000 f93a 	bl	8005510 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e002      	b.n	80052aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052aa:	4a04      	ldr	r2, [pc, #16]	@ (80052bc <prvSampleTimeNow+0x3c>)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052b0:	68fb      	ldr	r3, [r7, #12]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000da8 	.word	0x20000da8

080052c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d812      	bhi.n	800530c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	1ad2      	subs	r2, r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d302      	bcc.n	80052fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	e01b      	b.n	8005332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <prvInsertTimerInActiveList+0x7c>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3304      	adds	r3, #4
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f7fe f9e6 	bl	80036d6 <vListInsert>
 800530a:	e012      	b.n	8005332 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d206      	bcs.n	8005322 <prvInsertTimerInActiveList+0x62>
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d302      	bcc.n	8005322 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800531c:	2301      	movs	r3, #1
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e007      	b.n	8005332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005322:	4b07      	ldr	r3, [pc, #28]	@ (8005340 <prvInsertTimerInActiveList+0x80>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3304      	adds	r3, #4
 800532a:	4619      	mov	r1, r3
 800532c:	4610      	mov	r0, r2
 800532e:	f7fe f9d2 	bl	80036d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005332:	697b      	ldr	r3, [r7, #20]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	20000d9c 	.word	0x20000d9c
 8005340:	20000d98 	.word	0x20000d98

08005344 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	@ 0x38
 8005348:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800534a:	e0ce      	b.n	80054ea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	da19      	bge.n	8005386 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005352:	1d3b      	adds	r3, r7, #4
 8005354:	3304      	adds	r3, #4
 8005356:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	61fb      	str	r3, [r7, #28]
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	e7fd      	b.n	8005372 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800537c:	6850      	ldr	r0, [r2, #4]
 800537e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005380:	6892      	ldr	r2, [r2, #8]
 8005382:	4611      	mov	r1, r2
 8005384:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f2c0 80ae 	blt.w	80054ea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	3304      	adds	r3, #4
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe f9d2 	bl	8003748 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053a4:	463b      	mov	r3, r7
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff ff6a 	bl	8005280 <prvSampleTimeNow>
 80053ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	f200 8097 	bhi.w	80054e4 <prvProcessReceivedCommands+0x1a0>
 80053b6:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <prvProcessReceivedCommands+0x78>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	080053e5 	.word	0x080053e5
 80053c8:	0800545b 	.word	0x0800545b
 80053cc:	0800546f 	.word	0x0800546f
 80053d0:	080054bb 	.word	0x080054bb
 80053d4:	080053e5 	.word	0x080053e5
 80053d8:	080053e5 	.word	0x080053e5
 80053dc:	0800545b 	.word	0x0800545b
 80053e0:	0800546f 	.word	0x0800546f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	18d1      	adds	r1, r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005404:	f7ff ff5c 	bl	80052c0 <prvInsertTimerInActiveList>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d06c      	beq.n	80054e8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005414:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d061      	beq.n	80054e8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	441a      	add	r2, r3
 800542c:	2300      	movs	r3, #0
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	2300      	movs	r3, #0
 8005432:	2100      	movs	r1, #0
 8005434:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005436:	f7ff fe01 	bl	800503c <xTimerGenericCommand>
 800543a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d152      	bne.n	80054e8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	61bb      	str	r3, [r7, #24]
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	e7fd      	b.n	8005456 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800545a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	b2da      	uxtb	r2, r3
 8005466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005468:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800546c:	e03d      	b.n	80054ea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	b2da      	uxtb	r2, r3
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10b      	bne.n	80054a6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	617b      	str	r3, [r7, #20]
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	e7fd      	b.n	80054a2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	18d1      	adds	r1, r2, r3
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054b4:	f7ff ff04 	bl	80052c0 <prvInsertTimerInActiveList>
					break;
 80054b8:	e017      	b.n	80054ea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d103      	bne.n	80054d0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80054c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054ca:	f000 fbe5 	bl	8005c98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80054ce:	e00c      	b.n	80054ea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80054e2:	e002      	b.n	80054ea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80054e4:	bf00      	nop
 80054e6:	e000      	b.n	80054ea <prvProcessReceivedCommands+0x1a6>
					break;
 80054e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054ea:	4b08      	ldr	r3, [pc, #32]	@ (800550c <prvProcessReceivedCommands+0x1c8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	1d39      	adds	r1, r7, #4
 80054f0:	2200      	movs	r2, #0
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe fbfc 	bl	8003cf0 <xQueueReceive>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f47f af26 	bne.w	800534c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	3730      	adds	r7, #48	@ 0x30
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000da0 	.word	0x20000da0

08005510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005516:	e049      	b.n	80055ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005518:	4b2e      	ldr	r3, [pc, #184]	@ (80055d4 <prvSwitchTimerLists+0xc4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005522:	4b2c      	ldr	r3, [pc, #176]	@ (80055d4 <prvSwitchTimerLists+0xc4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3304      	adds	r3, #4
 8005530:	4618      	mov	r0, r3
 8005532:	f7fe f909 	bl	8003748 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d02f      	beq.n	80055ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4413      	add	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	429a      	cmp	r2, r3
 800555c:	d90e      	bls.n	800557c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800556a:	4b1a      	ldr	r3, [pc, #104]	@ (80055d4 <prvSwitchTimerLists+0xc4>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3304      	adds	r3, #4
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f7fe f8ae 	bl	80036d6 <vListInsert>
 800557a:	e017      	b.n	80055ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800557c:	2300      	movs	r3, #0
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2300      	movs	r3, #0
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	2100      	movs	r1, #0
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7ff fd58 	bl	800503c <xTimerGenericCommand>
 800558c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10b      	bne.n	80055ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	603b      	str	r3, [r7, #0]
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	e7fd      	b.n	80055a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055ac:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <prvSwitchTimerLists+0xc4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1b0      	bne.n	8005518 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055b6:	4b07      	ldr	r3, [pc, #28]	@ (80055d4 <prvSwitchTimerLists+0xc4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055bc:	4b06      	ldr	r3, [pc, #24]	@ (80055d8 <prvSwitchTimerLists+0xc8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a04      	ldr	r2, [pc, #16]	@ (80055d4 <prvSwitchTimerLists+0xc4>)
 80055c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055c4:	4a04      	ldr	r2, [pc, #16]	@ (80055d8 <prvSwitchTimerLists+0xc8>)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	6013      	str	r3, [r2, #0]
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000d98 	.word	0x20000d98
 80055d8:	20000d9c 	.word	0x20000d9c

080055dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80055e2:	f000 f969 	bl	80058b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80055e6:	4b15      	ldr	r3, [pc, #84]	@ (800563c <prvCheckForValidListAndQueue+0x60>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d120      	bne.n	8005630 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80055ee:	4814      	ldr	r0, [pc, #80]	@ (8005640 <prvCheckForValidListAndQueue+0x64>)
 80055f0:	f7fe f820 	bl	8003634 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80055f4:	4813      	ldr	r0, [pc, #76]	@ (8005644 <prvCheckForValidListAndQueue+0x68>)
 80055f6:	f7fe f81d 	bl	8003634 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80055fa:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <prvCheckForValidListAndQueue+0x6c>)
 80055fc:	4a10      	ldr	r2, [pc, #64]	@ (8005640 <prvCheckForValidListAndQueue+0x64>)
 80055fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005600:	4b12      	ldr	r3, [pc, #72]	@ (800564c <prvCheckForValidListAndQueue+0x70>)
 8005602:	4a10      	ldr	r2, [pc, #64]	@ (8005644 <prvCheckForValidListAndQueue+0x68>)
 8005604:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005606:	2300      	movs	r3, #0
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	4b11      	ldr	r3, [pc, #68]	@ (8005650 <prvCheckForValidListAndQueue+0x74>)
 800560c:	4a11      	ldr	r2, [pc, #68]	@ (8005654 <prvCheckForValidListAndQueue+0x78>)
 800560e:	2110      	movs	r1, #16
 8005610:	200a      	movs	r0, #10
 8005612:	f7fe f92d 	bl	8003870 <xQueueGenericCreateStatic>
 8005616:	4603      	mov	r3, r0
 8005618:	4a08      	ldr	r2, [pc, #32]	@ (800563c <prvCheckForValidListAndQueue+0x60>)
 800561a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800561c:	4b07      	ldr	r3, [pc, #28]	@ (800563c <prvCheckForValidListAndQueue+0x60>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005624:	4b05      	ldr	r3, [pc, #20]	@ (800563c <prvCheckForValidListAndQueue+0x60>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	490b      	ldr	r1, [pc, #44]	@ (8005658 <prvCheckForValidListAndQueue+0x7c>)
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fd52 	bl	80040d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005630:	f000 f974 	bl	800591c <vPortExitCritical>
}
 8005634:	bf00      	nop
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000da0 	.word	0x20000da0
 8005640:	20000d70 	.word	0x20000d70
 8005644:	20000d84 	.word	0x20000d84
 8005648:	20000d98 	.word	0x20000d98
 800564c:	20000d9c 	.word	0x20000d9c
 8005650:	20000e4c 	.word	0x20000e4c
 8005654:	20000dac 	.word	0x20000dac
 8005658:	08006884 	.word	0x08006884

0800565c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3b04      	subs	r3, #4
 800566c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3b04      	subs	r3, #4
 800567a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3b04      	subs	r3, #4
 800568a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800568c:	4a0c      	ldr	r2, [pc, #48]	@ (80056c0 <pxPortInitialiseStack+0x64>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3b14      	subs	r3, #20
 8005696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3b04      	subs	r3, #4
 80056a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f06f 0202 	mvn.w	r2, #2
 80056aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3b20      	subs	r3, #32
 80056b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056b2:	68fb      	ldr	r3, [r7, #12]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	080056c5 	.word	0x080056c5

080056c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056ce:	4b13      	ldr	r3, [pc, #76]	@ (800571c <prvTaskExitError+0x58>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056d6:	d00b      	beq.n	80056f0 <prvTaskExitError+0x2c>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60fb      	str	r3, [r7, #12]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <prvTaskExitError+0x28>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60bb      	str	r3, [r7, #8]
}
 8005702:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005704:	bf00      	nop
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0fc      	beq.n	8005706 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	2000000c 	.word	0x2000000c

08005720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005720:	4b07      	ldr	r3, [pc, #28]	@ (8005740 <pxCurrentTCBConst2>)
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	6808      	ldr	r0, [r1, #0]
 8005726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	f380 8809 	msr	PSP, r0
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8811 	msr	BASEPRI, r0
 800573a:	4770      	bx	lr
 800573c:	f3af 8000 	nop.w

08005740 <pxCurrentTCBConst2>:
 8005740:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop

08005748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005748:	4808      	ldr	r0, [pc, #32]	@ (800576c <prvPortStartFirstTask+0x24>)
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f380 8808 	msr	MSP, r0
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8814 	msr	CONTROL, r0
 800575a:	b662      	cpsie	i
 800575c:	b661      	cpsie	f
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	df00      	svc	0
 8005768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800576a:	bf00      	nop
 800576c:	e000ed08 	.word	0xe000ed08

08005770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005776:	4b47      	ldr	r3, [pc, #284]	@ (8005894 <xPortStartScheduler+0x124>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a47      	ldr	r2, [pc, #284]	@ (8005898 <xPortStartScheduler+0x128>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10b      	bne.n	8005798 <xPortStartScheduler+0x28>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005798:	4b3e      	ldr	r3, [pc, #248]	@ (8005894 <xPortStartScheduler+0x124>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a3f      	ldr	r2, [pc, #252]	@ (800589c <xPortStartScheduler+0x12c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d10b      	bne.n	80057ba <xPortStartScheduler+0x4a>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	60fb      	str	r3, [r7, #12]
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057ba:	4b39      	ldr	r3, [pc, #228]	@ (80058a0 <xPortStartScheduler+0x130>)
 80057bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	22ff      	movs	r2, #255	@ 0xff
 80057ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	4b31      	ldr	r3, [pc, #196]	@ (80058a4 <xPortStartScheduler+0x134>)
 80057e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057e2:	4b31      	ldr	r3, [pc, #196]	@ (80058a8 <xPortStartScheduler+0x138>)
 80057e4:	2207      	movs	r2, #7
 80057e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057e8:	e009      	b.n	80057fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80057ea:	4b2f      	ldr	r3, [pc, #188]	@ (80058a8 <xPortStartScheduler+0x138>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	4a2d      	ldr	r2, [pc, #180]	@ (80058a8 <xPortStartScheduler+0x138>)
 80057f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005806:	2b80      	cmp	r3, #128	@ 0x80
 8005808:	d0ef      	beq.n	80057ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800580a:	4b27      	ldr	r3, [pc, #156]	@ (80058a8 <xPortStartScheduler+0x138>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1c3 0307 	rsb	r3, r3, #7
 8005812:	2b04      	cmp	r3, #4
 8005814:	d00b      	beq.n	800582e <xPortStartScheduler+0xbe>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60bb      	str	r3, [r7, #8]
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800582e:	4b1e      	ldr	r3, [pc, #120]	@ (80058a8 <xPortStartScheduler+0x138>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <xPortStartScheduler+0x138>)
 8005836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005838:	4b1b      	ldr	r3, [pc, #108]	@ (80058a8 <xPortStartScheduler+0x138>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005840:	4a19      	ldr	r2, [pc, #100]	@ (80058a8 <xPortStartScheduler+0x138>)
 8005842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800584c:	4b17      	ldr	r3, [pc, #92]	@ (80058ac <xPortStartScheduler+0x13c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a16      	ldr	r2, [pc, #88]	@ (80058ac <xPortStartScheduler+0x13c>)
 8005852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005858:	4b14      	ldr	r3, [pc, #80]	@ (80058ac <xPortStartScheduler+0x13c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a13      	ldr	r2, [pc, #76]	@ (80058ac <xPortStartScheduler+0x13c>)
 800585e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005864:	f000 f8da 	bl	8005a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005868:	4b11      	ldr	r3, [pc, #68]	@ (80058b0 <xPortStartScheduler+0x140>)
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800586e:	f000 f8f9 	bl	8005a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005872:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <xPortStartScheduler+0x144>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a0f      	ldr	r2, [pc, #60]	@ (80058b4 <xPortStartScheduler+0x144>)
 8005878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800587c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800587e:	f7ff ff63 	bl	8005748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005882:	f7ff f83f 	bl	8004904 <vTaskSwitchContext>
	prvTaskExitError();
 8005886:	f7ff ff1d 	bl	80056c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	e000ed00 	.word	0xe000ed00
 8005898:	410fc271 	.word	0x410fc271
 800589c:	410fc270 	.word	0x410fc270
 80058a0:	e000e400 	.word	0xe000e400
 80058a4:	20000e9c 	.word	0x20000e9c
 80058a8:	20000ea0 	.word	0x20000ea0
 80058ac:	e000ed20 	.word	0xe000ed20
 80058b0:	2000000c 	.word	0x2000000c
 80058b4:	e000ef34 	.word	0xe000ef34

080058b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	607b      	str	r3, [r7, #4]
}
 80058d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058d2:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <vPortEnterCritical+0x5c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3301      	adds	r3, #1
 80058d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005914 <vPortEnterCritical+0x5c>)
 80058da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <vPortEnterCritical+0x5c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d110      	bne.n	8005906 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <vPortEnterCritical+0x60>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <vPortEnterCritical+0x4e>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	603b      	str	r3, [r7, #0]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <vPortEnterCritical+0x4a>
	}
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005922:	4b12      	ldr	r3, [pc, #72]	@ (800596c <vPortExitCritical+0x50>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <vPortExitCritical+0x26>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	607b      	str	r3, [r7, #4]
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	e7fd      	b.n	800593e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005942:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <vPortExitCritical+0x50>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3b01      	subs	r3, #1
 8005948:	4a08      	ldr	r2, [pc, #32]	@ (800596c <vPortExitCritical+0x50>)
 800594a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800594c:	4b07      	ldr	r3, [pc, #28]	@ (800596c <vPortExitCritical+0x50>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <vPortExitCritical+0x44>
 8005954:	2300      	movs	r3, #0
 8005956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f383 8811 	msr	BASEPRI, r3
}
 800595e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	2000000c 	.word	0x2000000c

08005970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005970:	f3ef 8009 	mrs	r0, PSP
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4b15      	ldr	r3, [pc, #84]	@ (80059d0 <pxCurrentTCBConst>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f01e 0f10 	tst.w	lr, #16
 8005980:	bf08      	it	eq
 8005982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598a:	6010      	str	r0, [r2, #0]
 800598c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005994:	f380 8811 	msr	BASEPRI, r0
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f7fe ffb0 	bl	8004904 <vTaskSwitchContext>
 80059a4:	f04f 0000 	mov.w	r0, #0
 80059a8:	f380 8811 	msr	BASEPRI, r0
 80059ac:	bc09      	pop	{r0, r3}
 80059ae:	6819      	ldr	r1, [r3, #0]
 80059b0:	6808      	ldr	r0, [r1, #0]
 80059b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b6:	f01e 0f10 	tst.w	lr, #16
 80059ba:	bf08      	it	eq
 80059bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059c0:	f380 8809 	msr	PSP, r0
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	f3af 8000 	nop.w

080059d0 <pxCurrentTCBConst>:
 80059d0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop

080059d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059f2:	f7fe fecd 	bl	8004790 <xTaskIncrementTick>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059fc:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <xPortSysTickHandler+0x40>)
 80059fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f383 8811 	msr	BASEPRI, r3
}
 8005a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a20:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <vPortSetupTimerInterrupt+0x34>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a26:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <vPortSetupTimerInterrupt+0x38>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <vPortSetupTimerInterrupt+0x3c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	@ (8005a5c <vPortSetupTimerInterrupt+0x40>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	4a09      	ldr	r2, [pc, #36]	@ (8005a60 <vPortSetupTimerInterrupt+0x44>)
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a3e:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <vPortSetupTimerInterrupt+0x34>)
 8005a40:	2207      	movs	r2, #7
 8005a42:	601a      	str	r2, [r3, #0]
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	e000e010 	.word	0xe000e010
 8005a54:	e000e018 	.word	0xe000e018
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	10624dd3 	.word	0x10624dd3
 8005a60:	e000e014 	.word	0xe000e014

08005a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005a74 <vPortEnableVFP+0x10>
 8005a68:	6801      	ldr	r1, [r0, #0]
 8005a6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005a6e:	6001      	str	r1, [r0, #0]
 8005a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a72:	bf00      	nop
 8005a74:	e000ed88 	.word	0xe000ed88

08005a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a7e:	f3ef 8305 	mrs	r3, IPSR
 8005a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b0f      	cmp	r3, #15
 8005a88:	d915      	bls.n	8005ab6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a8a:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <vPortValidateInterruptPriority+0x74>)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a94:	4b16      	ldr	r3, [pc, #88]	@ (8005af0 <vPortValidateInterruptPriority+0x78>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	7afa      	ldrb	r2, [r7, #11]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d20b      	bcs.n	8005ab6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	607b      	str	r3, [r7, #4]
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8005af4 <vPortValidateInterruptPriority+0x7c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005abe:	4b0e      	ldr	r3, [pc, #56]	@ (8005af8 <vPortValidateInterruptPriority+0x80>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d90b      	bls.n	8005ade <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	603b      	str	r3, [r7, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <vPortValidateInterruptPriority+0x62>
	}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	e000e3f0 	.word	0xe000e3f0
 8005af0:	20000e9c 	.word	0x20000e9c
 8005af4:	e000ed0c 	.word	0xe000ed0c
 8005af8:	20000ea0 	.word	0x20000ea0

08005afc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	@ 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b08:	f7fe fd86 	bl	8004618 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8005c80 <pvPortMalloc+0x184>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b14:	f000 f924 	bl	8005d60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b18:	4b5a      	ldr	r3, [pc, #360]	@ (8005c84 <pvPortMalloc+0x188>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f040 8095 	bne.w	8005c50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01e      	beq.n	8005b6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4413      	add	r3, r2
 8005b32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d015      	beq.n	8005b6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f023 0307 	bic.w	r3, r3, #7
 8005b44:	3308      	adds	r3, #8
 8005b46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00b      	beq.n	8005b6a <pvPortMalloc+0x6e>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	617b      	str	r3, [r7, #20]
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	e7fd      	b.n	8005b66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d06f      	beq.n	8005c50 <pvPortMalloc+0x154>
 8005b70:	4b45      	ldr	r3, [pc, #276]	@ (8005c88 <pvPortMalloc+0x18c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d86a      	bhi.n	8005c50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b7a:	4b44      	ldr	r3, [pc, #272]	@ (8005c8c <pvPortMalloc+0x190>)
 8005b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b7e:	4b43      	ldr	r3, [pc, #268]	@ (8005c8c <pvPortMalloc+0x190>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b84:	e004      	b.n	8005b90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d903      	bls.n	8005ba2 <pvPortMalloc+0xa6>
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f1      	bne.n	8005b86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ba2:	4b37      	ldr	r3, [pc, #220]	@ (8005c80 <pvPortMalloc+0x184>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d051      	beq.n	8005c50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	4413      	add	r3, r2
 8005bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	1ad2      	subs	r2, r2, r3
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d920      	bls.n	8005c10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <pvPortMalloc+0xfc>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	613b      	str	r3, [r7, #16]
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c0a:	69b8      	ldr	r0, [r7, #24]
 8005c0c:	f000 f90a 	bl	8005e24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c10:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <pvPortMalloc+0x18c>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005c88 <pvPortMalloc+0x18c>)
 8005c1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c88 <pvPortMalloc+0x18c>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4b1b      	ldr	r3, [pc, #108]	@ (8005c90 <pvPortMalloc+0x194>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d203      	bcs.n	8005c32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c2a:	4b17      	ldr	r3, [pc, #92]	@ (8005c88 <pvPortMalloc+0x18c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a18      	ldr	r2, [pc, #96]	@ (8005c90 <pvPortMalloc+0x194>)
 8005c30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	4b13      	ldr	r3, [pc, #76]	@ (8005c84 <pvPortMalloc+0x188>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c46:	4b13      	ldr	r3, [pc, #76]	@ (8005c94 <pvPortMalloc+0x198>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	4a11      	ldr	r2, [pc, #68]	@ (8005c94 <pvPortMalloc+0x198>)
 8005c4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c50:	f7fe fcf0 	bl	8004634 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <pvPortMalloc+0x17a>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	60fb      	str	r3, [r7, #12]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <pvPortMalloc+0x176>
	return pvReturn;
 8005c76:	69fb      	ldr	r3, [r7, #28]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3728      	adds	r7, #40	@ 0x28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20004aac 	.word	0x20004aac
 8005c84:	20004ac0 	.word	0x20004ac0
 8005c88:	20004ab0 	.word	0x20004ab0
 8005c8c:	20004aa4 	.word	0x20004aa4
 8005c90:	20004ab4 	.word	0x20004ab4
 8005c94:	20004ab8 	.word	0x20004ab8

08005c98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04f      	beq.n	8005d4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005caa:	2308      	movs	r3, #8
 8005cac:	425b      	negs	r3, r3
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	4b25      	ldr	r3, [pc, #148]	@ (8005d54 <vPortFree+0xbc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10b      	bne.n	8005cde <vPortFree+0x46>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60fb      	str	r3, [r7, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	e7fd      	b.n	8005cda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <vPortFree+0x66>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60bb      	str	r3, [r7, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	4b14      	ldr	r3, [pc, #80]	@ (8005d54 <vPortFree+0xbc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01e      	beq.n	8005d4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d11a      	bne.n	8005d4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	4b0e      	ldr	r3, [pc, #56]	@ (8005d54 <vPortFree+0xbc>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	401a      	ands	r2, r3
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d24:	f7fe fc78 	bl	8004618 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <vPortFree+0xc0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4413      	add	r3, r2
 8005d32:	4a09      	ldr	r2, [pc, #36]	@ (8005d58 <vPortFree+0xc0>)
 8005d34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d36:	6938      	ldr	r0, [r7, #16]
 8005d38:	f000 f874 	bl	8005e24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d3c:	4b07      	ldr	r3, [pc, #28]	@ (8005d5c <vPortFree+0xc4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	4a06      	ldr	r2, [pc, #24]	@ (8005d5c <vPortFree+0xc4>)
 8005d44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d46:	f7fe fc75 	bl	8004634 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d4a:	bf00      	nop
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20004ac0 	.word	0x20004ac0
 8005d58:	20004ab0 	.word	0x20004ab0
 8005d5c:	20004abc 	.word	0x20004abc

08005d60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005d6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d6c:	4b27      	ldr	r3, [pc, #156]	@ (8005e0c <prvHeapInit+0xac>)
 8005d6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00c      	beq.n	8005d94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3307      	adds	r3, #7
 8005d7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0307 	bic.w	r3, r3, #7
 8005d86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005e0c <prvHeapInit+0xac>)
 8005d90:	4413      	add	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d98:	4a1d      	ldr	r2, [pc, #116]	@ (8005e10 <prvHeapInit+0xb0>)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005e10 <prvHeapInit+0xb0>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4413      	add	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dac:	2208      	movs	r2, #8
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0307 	bic.w	r3, r3, #7
 8005dba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	@ (8005e14 <prvHeapInit+0xb4>)
 8005dc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005dc2:	4b14      	ldr	r3, [pc, #80]	@ (8005e14 <prvHeapInit+0xb4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dca:	4b12      	ldr	r3, [pc, #72]	@ (8005e14 <prvHeapInit+0xb4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005de0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e14 <prvHeapInit+0xb4>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4a0a      	ldr	r2, [pc, #40]	@ (8005e18 <prvHeapInit+0xb8>)
 8005dee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a09      	ldr	r2, [pc, #36]	@ (8005e1c <prvHeapInit+0xbc>)
 8005df6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005df8:	4b09      	ldr	r3, [pc, #36]	@ (8005e20 <prvHeapInit+0xc0>)
 8005dfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000ea4 	.word	0x20000ea4
 8005e10:	20004aa4 	.word	0x20004aa4
 8005e14:	20004aac 	.word	0x20004aac
 8005e18:	20004ab4 	.word	0x20004ab4
 8005e1c:	20004ab0 	.word	0x20004ab0
 8005e20:	20004ac0 	.word	0x20004ac0

08005e24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e2c:	4b28      	ldr	r3, [pc, #160]	@ (8005ed0 <prvInsertBlockIntoFreeList+0xac>)
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e002      	b.n	8005e38 <prvInsertBlockIntoFreeList+0x14>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d8f7      	bhi.n	8005e32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d108      	bne.n	8005e66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	441a      	add	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	441a      	add	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d118      	bne.n	8005eac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b15      	ldr	r3, [pc, #84]	@ (8005ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d00d      	beq.n	8005ea2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	441a      	add	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e008      	b.n	8005eb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	e003      	b.n	8005eb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d002      	beq.n	8005ec2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	20004aa4 	.word	0x20004aa4
 8005ed4:	20004aac 	.word	0x20004aac

08005ed8 <siprintf>:
 8005ed8:	b40e      	push	{r1, r2, r3}
 8005eda:	b500      	push	{lr}
 8005edc:	b09c      	sub	sp, #112	@ 0x70
 8005ede:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ee0:	9002      	str	r0, [sp, #8]
 8005ee2:	9006      	str	r0, [sp, #24]
 8005ee4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ee8:	4809      	ldr	r0, [pc, #36]	@ (8005f10 <siprintf+0x38>)
 8005eea:	9107      	str	r1, [sp, #28]
 8005eec:	9104      	str	r1, [sp, #16]
 8005eee:	4909      	ldr	r1, [pc, #36]	@ (8005f14 <siprintf+0x3c>)
 8005ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef4:	9105      	str	r1, [sp, #20]
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	9301      	str	r3, [sp, #4]
 8005efa:	a902      	add	r1, sp, #8
 8005efc:	f000 f9a2 	bl	8006244 <_svfiprintf_r>
 8005f00:	9b02      	ldr	r3, [sp, #8]
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	b01c      	add	sp, #112	@ 0x70
 8005f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f0c:	b003      	add	sp, #12
 8005f0e:	4770      	bx	lr
 8005f10:	20000010 	.word	0x20000010
 8005f14:	ffff0208 	.word	0xffff0208

08005f18 <memset>:
 8005f18:	4402      	add	r2, r0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d100      	bne.n	8005f22 <memset+0xa>
 8005f20:	4770      	bx	lr
 8005f22:	f803 1b01 	strb.w	r1, [r3], #1
 8005f26:	e7f9      	b.n	8005f1c <memset+0x4>

08005f28 <__errno>:
 8005f28:	4b01      	ldr	r3, [pc, #4]	@ (8005f30 <__errno+0x8>)
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20000010 	.word	0x20000010

08005f34 <__libc_init_array>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	4d0d      	ldr	r5, [pc, #52]	@ (8005f6c <__libc_init_array+0x38>)
 8005f38:	4c0d      	ldr	r4, [pc, #52]	@ (8005f70 <__libc_init_array+0x3c>)
 8005f3a:	1b64      	subs	r4, r4, r5
 8005f3c:	10a4      	asrs	r4, r4, #2
 8005f3e:	2600      	movs	r6, #0
 8005f40:	42a6      	cmp	r6, r4
 8005f42:	d109      	bne.n	8005f58 <__libc_init_array+0x24>
 8005f44:	4d0b      	ldr	r5, [pc, #44]	@ (8005f74 <__libc_init_array+0x40>)
 8005f46:	4c0c      	ldr	r4, [pc, #48]	@ (8005f78 <__libc_init_array+0x44>)
 8005f48:	f000 fc66 	bl	8006818 <_init>
 8005f4c:	1b64      	subs	r4, r4, r5
 8005f4e:	10a4      	asrs	r4, r4, #2
 8005f50:	2600      	movs	r6, #0
 8005f52:	42a6      	cmp	r6, r4
 8005f54:	d105      	bne.n	8005f62 <__libc_init_array+0x2e>
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5c:	4798      	blx	r3
 8005f5e:	3601      	adds	r6, #1
 8005f60:	e7ee      	b.n	8005f40 <__libc_init_array+0xc>
 8005f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f66:	4798      	blx	r3
 8005f68:	3601      	adds	r6, #1
 8005f6a:	e7f2      	b.n	8005f52 <__libc_init_array+0x1e>
 8005f6c:	08006994 	.word	0x08006994
 8005f70:	08006994 	.word	0x08006994
 8005f74:	08006994 	.word	0x08006994
 8005f78:	08006998 	.word	0x08006998

08005f7c <__retarget_lock_acquire_recursive>:
 8005f7c:	4770      	bx	lr

08005f7e <__retarget_lock_release_recursive>:
 8005f7e:	4770      	bx	lr

08005f80 <memcpy>:
 8005f80:	440a      	add	r2, r1
 8005f82:	4291      	cmp	r1, r2
 8005f84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005f88:	d100      	bne.n	8005f8c <memcpy+0xc>
 8005f8a:	4770      	bx	lr
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f96:	4291      	cmp	r1, r2
 8005f98:	d1f9      	bne.n	8005f8e <memcpy+0xe>
 8005f9a:	bd10      	pop	{r4, pc}

08005f9c <_free_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	2900      	cmp	r1, #0
 8005fa2:	d041      	beq.n	8006028 <_free_r+0x8c>
 8005fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa8:	1f0c      	subs	r4, r1, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bfb8      	it	lt
 8005fae:	18e4      	addlt	r4, r4, r3
 8005fb0:	f000 f8e0 	bl	8006174 <__malloc_lock>
 8005fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800602c <_free_r+0x90>)
 8005fb6:	6813      	ldr	r3, [r2, #0]
 8005fb8:	b933      	cbnz	r3, 8005fc8 <_free_r+0x2c>
 8005fba:	6063      	str	r3, [r4, #4]
 8005fbc:	6014      	str	r4, [r2, #0]
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fc4:	f000 b8dc 	b.w	8006180 <__malloc_unlock>
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	d908      	bls.n	8005fde <_free_r+0x42>
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	1821      	adds	r1, r4, r0
 8005fd0:	428b      	cmp	r3, r1
 8005fd2:	bf01      	itttt	eq
 8005fd4:	6819      	ldreq	r1, [r3, #0]
 8005fd6:	685b      	ldreq	r3, [r3, #4]
 8005fd8:	1809      	addeq	r1, r1, r0
 8005fda:	6021      	streq	r1, [r4, #0]
 8005fdc:	e7ed      	b.n	8005fba <_free_r+0x1e>
 8005fde:	461a      	mov	r2, r3
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	b10b      	cbz	r3, 8005fe8 <_free_r+0x4c>
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	d9fa      	bls.n	8005fde <_free_r+0x42>
 8005fe8:	6811      	ldr	r1, [r2, #0]
 8005fea:	1850      	adds	r0, r2, r1
 8005fec:	42a0      	cmp	r0, r4
 8005fee:	d10b      	bne.n	8006008 <_free_r+0x6c>
 8005ff0:	6820      	ldr	r0, [r4, #0]
 8005ff2:	4401      	add	r1, r0
 8005ff4:	1850      	adds	r0, r2, r1
 8005ff6:	4283      	cmp	r3, r0
 8005ff8:	6011      	str	r1, [r2, #0]
 8005ffa:	d1e0      	bne.n	8005fbe <_free_r+0x22>
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	6053      	str	r3, [r2, #4]
 8006002:	4408      	add	r0, r1
 8006004:	6010      	str	r0, [r2, #0]
 8006006:	e7da      	b.n	8005fbe <_free_r+0x22>
 8006008:	d902      	bls.n	8006010 <_free_r+0x74>
 800600a:	230c      	movs	r3, #12
 800600c:	602b      	str	r3, [r5, #0]
 800600e:	e7d6      	b.n	8005fbe <_free_r+0x22>
 8006010:	6820      	ldr	r0, [r4, #0]
 8006012:	1821      	adds	r1, r4, r0
 8006014:	428b      	cmp	r3, r1
 8006016:	bf04      	itt	eq
 8006018:	6819      	ldreq	r1, [r3, #0]
 800601a:	685b      	ldreq	r3, [r3, #4]
 800601c:	6063      	str	r3, [r4, #4]
 800601e:	bf04      	itt	eq
 8006020:	1809      	addeq	r1, r1, r0
 8006022:	6021      	streq	r1, [r4, #0]
 8006024:	6054      	str	r4, [r2, #4]
 8006026:	e7ca      	b.n	8005fbe <_free_r+0x22>
 8006028:	bd38      	pop	{r3, r4, r5, pc}
 800602a:	bf00      	nop
 800602c:	20004c08 	.word	0x20004c08

08006030 <sbrk_aligned>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4e0f      	ldr	r6, [pc, #60]	@ (8006070 <sbrk_aligned+0x40>)
 8006034:	460c      	mov	r4, r1
 8006036:	6831      	ldr	r1, [r6, #0]
 8006038:	4605      	mov	r5, r0
 800603a:	b911      	cbnz	r1, 8006042 <sbrk_aligned+0x12>
 800603c:	f000 fba6 	bl	800678c <_sbrk_r>
 8006040:	6030      	str	r0, [r6, #0]
 8006042:	4621      	mov	r1, r4
 8006044:	4628      	mov	r0, r5
 8006046:	f000 fba1 	bl	800678c <_sbrk_r>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	d103      	bne.n	8006056 <sbrk_aligned+0x26>
 800604e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006052:	4620      	mov	r0, r4
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	1cc4      	adds	r4, r0, #3
 8006058:	f024 0403 	bic.w	r4, r4, #3
 800605c:	42a0      	cmp	r0, r4
 800605e:	d0f8      	beq.n	8006052 <sbrk_aligned+0x22>
 8006060:	1a21      	subs	r1, r4, r0
 8006062:	4628      	mov	r0, r5
 8006064:	f000 fb92 	bl	800678c <_sbrk_r>
 8006068:	3001      	adds	r0, #1
 800606a:	d1f2      	bne.n	8006052 <sbrk_aligned+0x22>
 800606c:	e7ef      	b.n	800604e <sbrk_aligned+0x1e>
 800606e:	bf00      	nop
 8006070:	20004c04 	.word	0x20004c04

08006074 <_malloc_r>:
 8006074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006078:	1ccd      	adds	r5, r1, #3
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	2d00      	cmp	r5, #0
 8006088:	4606      	mov	r6, r0
 800608a:	db01      	blt.n	8006090 <_malloc_r+0x1c>
 800608c:	42a9      	cmp	r1, r5
 800608e:	d904      	bls.n	800609a <_malloc_r+0x26>
 8006090:	230c      	movs	r3, #12
 8006092:	6033      	str	r3, [r6, #0]
 8006094:	2000      	movs	r0, #0
 8006096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800609a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006170 <_malloc_r+0xfc>
 800609e:	f000 f869 	bl	8006174 <__malloc_lock>
 80060a2:	f8d8 3000 	ldr.w	r3, [r8]
 80060a6:	461c      	mov	r4, r3
 80060a8:	bb44      	cbnz	r4, 80060fc <_malloc_r+0x88>
 80060aa:	4629      	mov	r1, r5
 80060ac:	4630      	mov	r0, r6
 80060ae:	f7ff ffbf 	bl	8006030 <sbrk_aligned>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	4604      	mov	r4, r0
 80060b6:	d158      	bne.n	800616a <_malloc_r+0xf6>
 80060b8:	f8d8 4000 	ldr.w	r4, [r8]
 80060bc:	4627      	mov	r7, r4
 80060be:	2f00      	cmp	r7, #0
 80060c0:	d143      	bne.n	800614a <_malloc_r+0xd6>
 80060c2:	2c00      	cmp	r4, #0
 80060c4:	d04b      	beq.n	800615e <_malloc_r+0xea>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	4639      	mov	r1, r7
 80060ca:	4630      	mov	r0, r6
 80060cc:	eb04 0903 	add.w	r9, r4, r3
 80060d0:	f000 fb5c 	bl	800678c <_sbrk_r>
 80060d4:	4581      	cmp	r9, r0
 80060d6:	d142      	bne.n	800615e <_malloc_r+0xea>
 80060d8:	6821      	ldr	r1, [r4, #0]
 80060da:	1a6d      	subs	r5, r5, r1
 80060dc:	4629      	mov	r1, r5
 80060de:	4630      	mov	r0, r6
 80060e0:	f7ff ffa6 	bl	8006030 <sbrk_aligned>
 80060e4:	3001      	adds	r0, #1
 80060e6:	d03a      	beq.n	800615e <_malloc_r+0xea>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	442b      	add	r3, r5
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	f8d8 3000 	ldr.w	r3, [r8]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	bb62      	cbnz	r2, 8006150 <_malloc_r+0xdc>
 80060f6:	f8c8 7000 	str.w	r7, [r8]
 80060fa:	e00f      	b.n	800611c <_malloc_r+0xa8>
 80060fc:	6822      	ldr	r2, [r4, #0]
 80060fe:	1b52      	subs	r2, r2, r5
 8006100:	d420      	bmi.n	8006144 <_malloc_r+0xd0>
 8006102:	2a0b      	cmp	r2, #11
 8006104:	d917      	bls.n	8006136 <_malloc_r+0xc2>
 8006106:	1961      	adds	r1, r4, r5
 8006108:	42a3      	cmp	r3, r4
 800610a:	6025      	str	r5, [r4, #0]
 800610c:	bf18      	it	ne
 800610e:	6059      	strne	r1, [r3, #4]
 8006110:	6863      	ldr	r3, [r4, #4]
 8006112:	bf08      	it	eq
 8006114:	f8c8 1000 	streq.w	r1, [r8]
 8006118:	5162      	str	r2, [r4, r5]
 800611a:	604b      	str	r3, [r1, #4]
 800611c:	4630      	mov	r0, r6
 800611e:	f000 f82f 	bl	8006180 <__malloc_unlock>
 8006122:	f104 000b 	add.w	r0, r4, #11
 8006126:	1d23      	adds	r3, r4, #4
 8006128:	f020 0007 	bic.w	r0, r0, #7
 800612c:	1ac2      	subs	r2, r0, r3
 800612e:	bf1c      	itt	ne
 8006130:	1a1b      	subne	r3, r3, r0
 8006132:	50a3      	strne	r3, [r4, r2]
 8006134:	e7af      	b.n	8006096 <_malloc_r+0x22>
 8006136:	6862      	ldr	r2, [r4, #4]
 8006138:	42a3      	cmp	r3, r4
 800613a:	bf0c      	ite	eq
 800613c:	f8c8 2000 	streq.w	r2, [r8]
 8006140:	605a      	strne	r2, [r3, #4]
 8006142:	e7eb      	b.n	800611c <_malloc_r+0xa8>
 8006144:	4623      	mov	r3, r4
 8006146:	6864      	ldr	r4, [r4, #4]
 8006148:	e7ae      	b.n	80060a8 <_malloc_r+0x34>
 800614a:	463c      	mov	r4, r7
 800614c:	687f      	ldr	r7, [r7, #4]
 800614e:	e7b6      	b.n	80060be <_malloc_r+0x4a>
 8006150:	461a      	mov	r2, r3
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	42a3      	cmp	r3, r4
 8006156:	d1fb      	bne.n	8006150 <_malloc_r+0xdc>
 8006158:	2300      	movs	r3, #0
 800615a:	6053      	str	r3, [r2, #4]
 800615c:	e7de      	b.n	800611c <_malloc_r+0xa8>
 800615e:	230c      	movs	r3, #12
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	4630      	mov	r0, r6
 8006164:	f000 f80c 	bl	8006180 <__malloc_unlock>
 8006168:	e794      	b.n	8006094 <_malloc_r+0x20>
 800616a:	6005      	str	r5, [r0, #0]
 800616c:	e7d6      	b.n	800611c <_malloc_r+0xa8>
 800616e:	bf00      	nop
 8006170:	20004c08 	.word	0x20004c08

08006174 <__malloc_lock>:
 8006174:	4801      	ldr	r0, [pc, #4]	@ (800617c <__malloc_lock+0x8>)
 8006176:	f7ff bf01 	b.w	8005f7c <__retarget_lock_acquire_recursive>
 800617a:	bf00      	nop
 800617c:	20004c00 	.word	0x20004c00

08006180 <__malloc_unlock>:
 8006180:	4801      	ldr	r0, [pc, #4]	@ (8006188 <__malloc_unlock+0x8>)
 8006182:	f7ff befc 	b.w	8005f7e <__retarget_lock_release_recursive>
 8006186:	bf00      	nop
 8006188:	20004c00 	.word	0x20004c00

0800618c <__ssputs_r>:
 800618c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006190:	688e      	ldr	r6, [r1, #8]
 8006192:	461f      	mov	r7, r3
 8006194:	42be      	cmp	r6, r7
 8006196:	680b      	ldr	r3, [r1, #0]
 8006198:	4682      	mov	sl, r0
 800619a:	460c      	mov	r4, r1
 800619c:	4690      	mov	r8, r2
 800619e:	d82d      	bhi.n	80061fc <__ssputs_r+0x70>
 80061a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80061a8:	d026      	beq.n	80061f8 <__ssputs_r+0x6c>
 80061aa:	6965      	ldr	r5, [r4, #20]
 80061ac:	6909      	ldr	r1, [r1, #16]
 80061ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061b2:	eba3 0901 	sub.w	r9, r3, r1
 80061b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061ba:	1c7b      	adds	r3, r7, #1
 80061bc:	444b      	add	r3, r9
 80061be:	106d      	asrs	r5, r5, #1
 80061c0:	429d      	cmp	r5, r3
 80061c2:	bf38      	it	cc
 80061c4:	461d      	movcc	r5, r3
 80061c6:	0553      	lsls	r3, r2, #21
 80061c8:	d527      	bpl.n	800621a <__ssputs_r+0x8e>
 80061ca:	4629      	mov	r1, r5
 80061cc:	f7ff ff52 	bl	8006074 <_malloc_r>
 80061d0:	4606      	mov	r6, r0
 80061d2:	b360      	cbz	r0, 800622e <__ssputs_r+0xa2>
 80061d4:	6921      	ldr	r1, [r4, #16]
 80061d6:	464a      	mov	r2, r9
 80061d8:	f7ff fed2 	bl	8005f80 <memcpy>
 80061dc:	89a3      	ldrh	r3, [r4, #12]
 80061de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e6:	81a3      	strh	r3, [r4, #12]
 80061e8:	6126      	str	r6, [r4, #16]
 80061ea:	6165      	str	r5, [r4, #20]
 80061ec:	444e      	add	r6, r9
 80061ee:	eba5 0509 	sub.w	r5, r5, r9
 80061f2:	6026      	str	r6, [r4, #0]
 80061f4:	60a5      	str	r5, [r4, #8]
 80061f6:	463e      	mov	r6, r7
 80061f8:	42be      	cmp	r6, r7
 80061fa:	d900      	bls.n	80061fe <__ssputs_r+0x72>
 80061fc:	463e      	mov	r6, r7
 80061fe:	6820      	ldr	r0, [r4, #0]
 8006200:	4632      	mov	r2, r6
 8006202:	4641      	mov	r1, r8
 8006204:	f000 faa8 	bl	8006758 <memmove>
 8006208:	68a3      	ldr	r3, [r4, #8]
 800620a:	1b9b      	subs	r3, r3, r6
 800620c:	60a3      	str	r3, [r4, #8]
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	4433      	add	r3, r6
 8006212:	6023      	str	r3, [r4, #0]
 8006214:	2000      	movs	r0, #0
 8006216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621a:	462a      	mov	r2, r5
 800621c:	f000 fac6 	bl	80067ac <_realloc_r>
 8006220:	4606      	mov	r6, r0
 8006222:	2800      	cmp	r0, #0
 8006224:	d1e0      	bne.n	80061e8 <__ssputs_r+0x5c>
 8006226:	6921      	ldr	r1, [r4, #16]
 8006228:	4650      	mov	r0, sl
 800622a:	f7ff feb7 	bl	8005f9c <_free_r>
 800622e:	230c      	movs	r3, #12
 8006230:	f8ca 3000 	str.w	r3, [sl]
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006240:	e7e9      	b.n	8006216 <__ssputs_r+0x8a>
	...

08006244 <_svfiprintf_r>:
 8006244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	4698      	mov	r8, r3
 800624a:	898b      	ldrh	r3, [r1, #12]
 800624c:	061b      	lsls	r3, r3, #24
 800624e:	b09d      	sub	sp, #116	@ 0x74
 8006250:	4607      	mov	r7, r0
 8006252:	460d      	mov	r5, r1
 8006254:	4614      	mov	r4, r2
 8006256:	d510      	bpl.n	800627a <_svfiprintf_r+0x36>
 8006258:	690b      	ldr	r3, [r1, #16]
 800625a:	b973      	cbnz	r3, 800627a <_svfiprintf_r+0x36>
 800625c:	2140      	movs	r1, #64	@ 0x40
 800625e:	f7ff ff09 	bl	8006074 <_malloc_r>
 8006262:	6028      	str	r0, [r5, #0]
 8006264:	6128      	str	r0, [r5, #16]
 8006266:	b930      	cbnz	r0, 8006276 <_svfiprintf_r+0x32>
 8006268:	230c      	movs	r3, #12
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006270:	b01d      	add	sp, #116	@ 0x74
 8006272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006276:	2340      	movs	r3, #64	@ 0x40
 8006278:	616b      	str	r3, [r5, #20]
 800627a:	2300      	movs	r3, #0
 800627c:	9309      	str	r3, [sp, #36]	@ 0x24
 800627e:	2320      	movs	r3, #32
 8006280:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006284:	f8cd 800c 	str.w	r8, [sp, #12]
 8006288:	2330      	movs	r3, #48	@ 0x30
 800628a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006428 <_svfiprintf_r+0x1e4>
 800628e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006292:	f04f 0901 	mov.w	r9, #1
 8006296:	4623      	mov	r3, r4
 8006298:	469a      	mov	sl, r3
 800629a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800629e:	b10a      	cbz	r2, 80062a4 <_svfiprintf_r+0x60>
 80062a0:	2a25      	cmp	r2, #37	@ 0x25
 80062a2:	d1f9      	bne.n	8006298 <_svfiprintf_r+0x54>
 80062a4:	ebba 0b04 	subs.w	fp, sl, r4
 80062a8:	d00b      	beq.n	80062c2 <_svfiprintf_r+0x7e>
 80062aa:	465b      	mov	r3, fp
 80062ac:	4622      	mov	r2, r4
 80062ae:	4629      	mov	r1, r5
 80062b0:	4638      	mov	r0, r7
 80062b2:	f7ff ff6b 	bl	800618c <__ssputs_r>
 80062b6:	3001      	adds	r0, #1
 80062b8:	f000 80a7 	beq.w	800640a <_svfiprintf_r+0x1c6>
 80062bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062be:	445a      	add	r2, fp
 80062c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80062c2:	f89a 3000 	ldrb.w	r3, [sl]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 809f 	beq.w	800640a <_svfiprintf_r+0x1c6>
 80062cc:	2300      	movs	r3, #0
 80062ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062d6:	f10a 0a01 	add.w	sl, sl, #1
 80062da:	9304      	str	r3, [sp, #16]
 80062dc:	9307      	str	r3, [sp, #28]
 80062de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80062e4:	4654      	mov	r4, sl
 80062e6:	2205      	movs	r2, #5
 80062e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ec:	484e      	ldr	r0, [pc, #312]	@ (8006428 <_svfiprintf_r+0x1e4>)
 80062ee:	f7f9 ff77 	bl	80001e0 <memchr>
 80062f2:	9a04      	ldr	r2, [sp, #16]
 80062f4:	b9d8      	cbnz	r0, 800632e <_svfiprintf_r+0xea>
 80062f6:	06d0      	lsls	r0, r2, #27
 80062f8:	bf44      	itt	mi
 80062fa:	2320      	movmi	r3, #32
 80062fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006300:	0711      	lsls	r1, r2, #28
 8006302:	bf44      	itt	mi
 8006304:	232b      	movmi	r3, #43	@ 0x2b
 8006306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800630a:	f89a 3000 	ldrb.w	r3, [sl]
 800630e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006310:	d015      	beq.n	800633e <_svfiprintf_r+0xfa>
 8006312:	9a07      	ldr	r2, [sp, #28]
 8006314:	4654      	mov	r4, sl
 8006316:	2000      	movs	r0, #0
 8006318:	f04f 0c0a 	mov.w	ip, #10
 800631c:	4621      	mov	r1, r4
 800631e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006322:	3b30      	subs	r3, #48	@ 0x30
 8006324:	2b09      	cmp	r3, #9
 8006326:	d94b      	bls.n	80063c0 <_svfiprintf_r+0x17c>
 8006328:	b1b0      	cbz	r0, 8006358 <_svfiprintf_r+0x114>
 800632a:	9207      	str	r2, [sp, #28]
 800632c:	e014      	b.n	8006358 <_svfiprintf_r+0x114>
 800632e:	eba0 0308 	sub.w	r3, r0, r8
 8006332:	fa09 f303 	lsl.w	r3, r9, r3
 8006336:	4313      	orrs	r3, r2
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	46a2      	mov	sl, r4
 800633c:	e7d2      	b.n	80062e4 <_svfiprintf_r+0xa0>
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	1d19      	adds	r1, r3, #4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	9103      	str	r1, [sp, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	bfbb      	ittet	lt
 800634a:	425b      	neglt	r3, r3
 800634c:	f042 0202 	orrlt.w	r2, r2, #2
 8006350:	9307      	strge	r3, [sp, #28]
 8006352:	9307      	strlt	r3, [sp, #28]
 8006354:	bfb8      	it	lt
 8006356:	9204      	strlt	r2, [sp, #16]
 8006358:	7823      	ldrb	r3, [r4, #0]
 800635a:	2b2e      	cmp	r3, #46	@ 0x2e
 800635c:	d10a      	bne.n	8006374 <_svfiprintf_r+0x130>
 800635e:	7863      	ldrb	r3, [r4, #1]
 8006360:	2b2a      	cmp	r3, #42	@ 0x2a
 8006362:	d132      	bne.n	80063ca <_svfiprintf_r+0x186>
 8006364:	9b03      	ldr	r3, [sp, #12]
 8006366:	1d1a      	adds	r2, r3, #4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	9203      	str	r2, [sp, #12]
 800636c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006370:	3402      	adds	r4, #2
 8006372:	9305      	str	r3, [sp, #20]
 8006374:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006438 <_svfiprintf_r+0x1f4>
 8006378:	7821      	ldrb	r1, [r4, #0]
 800637a:	2203      	movs	r2, #3
 800637c:	4650      	mov	r0, sl
 800637e:	f7f9 ff2f 	bl	80001e0 <memchr>
 8006382:	b138      	cbz	r0, 8006394 <_svfiprintf_r+0x150>
 8006384:	9b04      	ldr	r3, [sp, #16]
 8006386:	eba0 000a 	sub.w	r0, r0, sl
 800638a:	2240      	movs	r2, #64	@ 0x40
 800638c:	4082      	lsls	r2, r0
 800638e:	4313      	orrs	r3, r2
 8006390:	3401      	adds	r4, #1
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006398:	4824      	ldr	r0, [pc, #144]	@ (800642c <_svfiprintf_r+0x1e8>)
 800639a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800639e:	2206      	movs	r2, #6
 80063a0:	f7f9 ff1e 	bl	80001e0 <memchr>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d036      	beq.n	8006416 <_svfiprintf_r+0x1d2>
 80063a8:	4b21      	ldr	r3, [pc, #132]	@ (8006430 <_svfiprintf_r+0x1ec>)
 80063aa:	bb1b      	cbnz	r3, 80063f4 <_svfiprintf_r+0x1b0>
 80063ac:	9b03      	ldr	r3, [sp, #12]
 80063ae:	3307      	adds	r3, #7
 80063b0:	f023 0307 	bic.w	r3, r3, #7
 80063b4:	3308      	adds	r3, #8
 80063b6:	9303      	str	r3, [sp, #12]
 80063b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ba:	4433      	add	r3, r6
 80063bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80063be:	e76a      	b.n	8006296 <_svfiprintf_r+0x52>
 80063c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80063c4:	460c      	mov	r4, r1
 80063c6:	2001      	movs	r0, #1
 80063c8:	e7a8      	b.n	800631c <_svfiprintf_r+0xd8>
 80063ca:	2300      	movs	r3, #0
 80063cc:	3401      	adds	r4, #1
 80063ce:	9305      	str	r3, [sp, #20]
 80063d0:	4619      	mov	r1, r3
 80063d2:	f04f 0c0a 	mov.w	ip, #10
 80063d6:	4620      	mov	r0, r4
 80063d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063dc:	3a30      	subs	r2, #48	@ 0x30
 80063de:	2a09      	cmp	r2, #9
 80063e0:	d903      	bls.n	80063ea <_svfiprintf_r+0x1a6>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0c6      	beq.n	8006374 <_svfiprintf_r+0x130>
 80063e6:	9105      	str	r1, [sp, #20]
 80063e8:	e7c4      	b.n	8006374 <_svfiprintf_r+0x130>
 80063ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80063ee:	4604      	mov	r4, r0
 80063f0:	2301      	movs	r3, #1
 80063f2:	e7f0      	b.n	80063d6 <_svfiprintf_r+0x192>
 80063f4:	ab03      	add	r3, sp, #12
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	462a      	mov	r2, r5
 80063fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006434 <_svfiprintf_r+0x1f0>)
 80063fc:	a904      	add	r1, sp, #16
 80063fe:	4638      	mov	r0, r7
 8006400:	f3af 8000 	nop.w
 8006404:	1c42      	adds	r2, r0, #1
 8006406:	4606      	mov	r6, r0
 8006408:	d1d6      	bne.n	80063b8 <_svfiprintf_r+0x174>
 800640a:	89ab      	ldrh	r3, [r5, #12]
 800640c:	065b      	lsls	r3, r3, #25
 800640e:	f53f af2d 	bmi.w	800626c <_svfiprintf_r+0x28>
 8006412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006414:	e72c      	b.n	8006270 <_svfiprintf_r+0x2c>
 8006416:	ab03      	add	r3, sp, #12
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	462a      	mov	r2, r5
 800641c:	4b05      	ldr	r3, [pc, #20]	@ (8006434 <_svfiprintf_r+0x1f0>)
 800641e:	a904      	add	r1, sp, #16
 8006420:	4638      	mov	r0, r7
 8006422:	f000 f879 	bl	8006518 <_printf_i>
 8006426:	e7ed      	b.n	8006404 <_svfiprintf_r+0x1c0>
 8006428:	08006958 	.word	0x08006958
 800642c:	08006962 	.word	0x08006962
 8006430:	00000000 	.word	0x00000000
 8006434:	0800618d 	.word	0x0800618d
 8006438:	0800695e 	.word	0x0800695e

0800643c <_printf_common>:
 800643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006440:	4616      	mov	r6, r2
 8006442:	4698      	mov	r8, r3
 8006444:	688a      	ldr	r2, [r1, #8]
 8006446:	690b      	ldr	r3, [r1, #16]
 8006448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800644c:	4293      	cmp	r3, r2
 800644e:	bfb8      	it	lt
 8006450:	4613      	movlt	r3, r2
 8006452:	6033      	str	r3, [r6, #0]
 8006454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006458:	4607      	mov	r7, r0
 800645a:	460c      	mov	r4, r1
 800645c:	b10a      	cbz	r2, 8006462 <_printf_common+0x26>
 800645e:	3301      	adds	r3, #1
 8006460:	6033      	str	r3, [r6, #0]
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	0699      	lsls	r1, r3, #26
 8006466:	bf42      	ittt	mi
 8006468:	6833      	ldrmi	r3, [r6, #0]
 800646a:	3302      	addmi	r3, #2
 800646c:	6033      	strmi	r3, [r6, #0]
 800646e:	6825      	ldr	r5, [r4, #0]
 8006470:	f015 0506 	ands.w	r5, r5, #6
 8006474:	d106      	bne.n	8006484 <_printf_common+0x48>
 8006476:	f104 0a19 	add.w	sl, r4, #25
 800647a:	68e3      	ldr	r3, [r4, #12]
 800647c:	6832      	ldr	r2, [r6, #0]
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	42ab      	cmp	r3, r5
 8006482:	dc26      	bgt.n	80064d2 <_printf_common+0x96>
 8006484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	3b00      	subs	r3, #0
 800648c:	bf18      	it	ne
 800648e:	2301      	movne	r3, #1
 8006490:	0692      	lsls	r2, r2, #26
 8006492:	d42b      	bmi.n	80064ec <_printf_common+0xb0>
 8006494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006498:	4641      	mov	r1, r8
 800649a:	4638      	mov	r0, r7
 800649c:	47c8      	blx	r9
 800649e:	3001      	adds	r0, #1
 80064a0:	d01e      	beq.n	80064e0 <_printf_common+0xa4>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	6922      	ldr	r2, [r4, #16]
 80064a6:	f003 0306 	and.w	r3, r3, #6
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	bf02      	ittt	eq
 80064ae:	68e5      	ldreq	r5, [r4, #12]
 80064b0:	6833      	ldreq	r3, [r6, #0]
 80064b2:	1aed      	subeq	r5, r5, r3
 80064b4:	68a3      	ldr	r3, [r4, #8]
 80064b6:	bf0c      	ite	eq
 80064b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064bc:	2500      	movne	r5, #0
 80064be:	4293      	cmp	r3, r2
 80064c0:	bfc4      	itt	gt
 80064c2:	1a9b      	subgt	r3, r3, r2
 80064c4:	18ed      	addgt	r5, r5, r3
 80064c6:	2600      	movs	r6, #0
 80064c8:	341a      	adds	r4, #26
 80064ca:	42b5      	cmp	r5, r6
 80064cc:	d11a      	bne.n	8006504 <_printf_common+0xc8>
 80064ce:	2000      	movs	r0, #0
 80064d0:	e008      	b.n	80064e4 <_printf_common+0xa8>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4652      	mov	r2, sl
 80064d6:	4641      	mov	r1, r8
 80064d8:	4638      	mov	r0, r7
 80064da:	47c8      	blx	r9
 80064dc:	3001      	adds	r0, #1
 80064de:	d103      	bne.n	80064e8 <_printf_common+0xac>
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e8:	3501      	adds	r5, #1
 80064ea:	e7c6      	b.n	800647a <_printf_common+0x3e>
 80064ec:	18e1      	adds	r1, r4, r3
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	2030      	movs	r0, #48	@ 0x30
 80064f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064f6:	4422      	add	r2, r4
 80064f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006500:	3302      	adds	r3, #2
 8006502:	e7c7      	b.n	8006494 <_printf_common+0x58>
 8006504:	2301      	movs	r3, #1
 8006506:	4622      	mov	r2, r4
 8006508:	4641      	mov	r1, r8
 800650a:	4638      	mov	r0, r7
 800650c:	47c8      	blx	r9
 800650e:	3001      	adds	r0, #1
 8006510:	d0e6      	beq.n	80064e0 <_printf_common+0xa4>
 8006512:	3601      	adds	r6, #1
 8006514:	e7d9      	b.n	80064ca <_printf_common+0x8e>
	...

08006518 <_printf_i>:
 8006518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800651c:	7e0f      	ldrb	r7, [r1, #24]
 800651e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006520:	2f78      	cmp	r7, #120	@ 0x78
 8006522:	4691      	mov	r9, r2
 8006524:	4680      	mov	r8, r0
 8006526:	460c      	mov	r4, r1
 8006528:	469a      	mov	sl, r3
 800652a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800652e:	d807      	bhi.n	8006540 <_printf_i+0x28>
 8006530:	2f62      	cmp	r7, #98	@ 0x62
 8006532:	d80a      	bhi.n	800654a <_printf_i+0x32>
 8006534:	2f00      	cmp	r7, #0
 8006536:	f000 80d2 	beq.w	80066de <_printf_i+0x1c6>
 800653a:	2f58      	cmp	r7, #88	@ 0x58
 800653c:	f000 80b9 	beq.w	80066b2 <_printf_i+0x19a>
 8006540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006548:	e03a      	b.n	80065c0 <_printf_i+0xa8>
 800654a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800654e:	2b15      	cmp	r3, #21
 8006550:	d8f6      	bhi.n	8006540 <_printf_i+0x28>
 8006552:	a101      	add	r1, pc, #4	@ (adr r1, 8006558 <_printf_i+0x40>)
 8006554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006558:	080065b1 	.word	0x080065b1
 800655c:	080065c5 	.word	0x080065c5
 8006560:	08006541 	.word	0x08006541
 8006564:	08006541 	.word	0x08006541
 8006568:	08006541 	.word	0x08006541
 800656c:	08006541 	.word	0x08006541
 8006570:	080065c5 	.word	0x080065c5
 8006574:	08006541 	.word	0x08006541
 8006578:	08006541 	.word	0x08006541
 800657c:	08006541 	.word	0x08006541
 8006580:	08006541 	.word	0x08006541
 8006584:	080066c5 	.word	0x080066c5
 8006588:	080065ef 	.word	0x080065ef
 800658c:	0800667f 	.word	0x0800667f
 8006590:	08006541 	.word	0x08006541
 8006594:	08006541 	.word	0x08006541
 8006598:	080066e7 	.word	0x080066e7
 800659c:	08006541 	.word	0x08006541
 80065a0:	080065ef 	.word	0x080065ef
 80065a4:	08006541 	.word	0x08006541
 80065a8:	08006541 	.word	0x08006541
 80065ac:	08006687 	.word	0x08006687
 80065b0:	6833      	ldr	r3, [r6, #0]
 80065b2:	1d1a      	adds	r2, r3, #4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6032      	str	r2, [r6, #0]
 80065b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065c0:	2301      	movs	r3, #1
 80065c2:	e09d      	b.n	8006700 <_printf_i+0x1e8>
 80065c4:	6833      	ldr	r3, [r6, #0]
 80065c6:	6820      	ldr	r0, [r4, #0]
 80065c8:	1d19      	adds	r1, r3, #4
 80065ca:	6031      	str	r1, [r6, #0]
 80065cc:	0606      	lsls	r6, r0, #24
 80065ce:	d501      	bpl.n	80065d4 <_printf_i+0xbc>
 80065d0:	681d      	ldr	r5, [r3, #0]
 80065d2:	e003      	b.n	80065dc <_printf_i+0xc4>
 80065d4:	0645      	lsls	r5, r0, #25
 80065d6:	d5fb      	bpl.n	80065d0 <_printf_i+0xb8>
 80065d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065dc:	2d00      	cmp	r5, #0
 80065de:	da03      	bge.n	80065e8 <_printf_i+0xd0>
 80065e0:	232d      	movs	r3, #45	@ 0x2d
 80065e2:	426d      	negs	r5, r5
 80065e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065e8:	4859      	ldr	r0, [pc, #356]	@ (8006750 <_printf_i+0x238>)
 80065ea:	230a      	movs	r3, #10
 80065ec:	e011      	b.n	8006612 <_printf_i+0xfa>
 80065ee:	6821      	ldr	r1, [r4, #0]
 80065f0:	6833      	ldr	r3, [r6, #0]
 80065f2:	0608      	lsls	r0, r1, #24
 80065f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80065f8:	d402      	bmi.n	8006600 <_printf_i+0xe8>
 80065fa:	0649      	lsls	r1, r1, #25
 80065fc:	bf48      	it	mi
 80065fe:	b2ad      	uxthmi	r5, r5
 8006600:	2f6f      	cmp	r7, #111	@ 0x6f
 8006602:	4853      	ldr	r0, [pc, #332]	@ (8006750 <_printf_i+0x238>)
 8006604:	6033      	str	r3, [r6, #0]
 8006606:	bf14      	ite	ne
 8006608:	230a      	movne	r3, #10
 800660a:	2308      	moveq	r3, #8
 800660c:	2100      	movs	r1, #0
 800660e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006612:	6866      	ldr	r6, [r4, #4]
 8006614:	60a6      	str	r6, [r4, #8]
 8006616:	2e00      	cmp	r6, #0
 8006618:	bfa2      	ittt	ge
 800661a:	6821      	ldrge	r1, [r4, #0]
 800661c:	f021 0104 	bicge.w	r1, r1, #4
 8006620:	6021      	strge	r1, [r4, #0]
 8006622:	b90d      	cbnz	r5, 8006628 <_printf_i+0x110>
 8006624:	2e00      	cmp	r6, #0
 8006626:	d04b      	beq.n	80066c0 <_printf_i+0x1a8>
 8006628:	4616      	mov	r6, r2
 800662a:	fbb5 f1f3 	udiv	r1, r5, r3
 800662e:	fb03 5711 	mls	r7, r3, r1, r5
 8006632:	5dc7      	ldrb	r7, [r0, r7]
 8006634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006638:	462f      	mov	r7, r5
 800663a:	42bb      	cmp	r3, r7
 800663c:	460d      	mov	r5, r1
 800663e:	d9f4      	bls.n	800662a <_printf_i+0x112>
 8006640:	2b08      	cmp	r3, #8
 8006642:	d10b      	bne.n	800665c <_printf_i+0x144>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	07df      	lsls	r7, r3, #31
 8006648:	d508      	bpl.n	800665c <_printf_i+0x144>
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	6861      	ldr	r1, [r4, #4]
 800664e:	4299      	cmp	r1, r3
 8006650:	bfde      	ittt	le
 8006652:	2330      	movle	r3, #48	@ 0x30
 8006654:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006658:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800665c:	1b92      	subs	r2, r2, r6
 800665e:	6122      	str	r2, [r4, #16]
 8006660:	f8cd a000 	str.w	sl, [sp]
 8006664:	464b      	mov	r3, r9
 8006666:	aa03      	add	r2, sp, #12
 8006668:	4621      	mov	r1, r4
 800666a:	4640      	mov	r0, r8
 800666c:	f7ff fee6 	bl	800643c <_printf_common>
 8006670:	3001      	adds	r0, #1
 8006672:	d14a      	bne.n	800670a <_printf_i+0x1f2>
 8006674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006678:	b004      	add	sp, #16
 800667a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	f043 0320 	orr.w	r3, r3, #32
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	4833      	ldr	r0, [pc, #204]	@ (8006754 <_printf_i+0x23c>)
 8006688:	2778      	movs	r7, #120	@ 0x78
 800668a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	6831      	ldr	r1, [r6, #0]
 8006692:	061f      	lsls	r7, r3, #24
 8006694:	f851 5b04 	ldr.w	r5, [r1], #4
 8006698:	d402      	bmi.n	80066a0 <_printf_i+0x188>
 800669a:	065f      	lsls	r7, r3, #25
 800669c:	bf48      	it	mi
 800669e:	b2ad      	uxthmi	r5, r5
 80066a0:	6031      	str	r1, [r6, #0]
 80066a2:	07d9      	lsls	r1, r3, #31
 80066a4:	bf44      	itt	mi
 80066a6:	f043 0320 	orrmi.w	r3, r3, #32
 80066aa:	6023      	strmi	r3, [r4, #0]
 80066ac:	b11d      	cbz	r5, 80066b6 <_printf_i+0x19e>
 80066ae:	2310      	movs	r3, #16
 80066b0:	e7ac      	b.n	800660c <_printf_i+0xf4>
 80066b2:	4827      	ldr	r0, [pc, #156]	@ (8006750 <_printf_i+0x238>)
 80066b4:	e7e9      	b.n	800668a <_printf_i+0x172>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	f023 0320 	bic.w	r3, r3, #32
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	e7f6      	b.n	80066ae <_printf_i+0x196>
 80066c0:	4616      	mov	r6, r2
 80066c2:	e7bd      	b.n	8006640 <_printf_i+0x128>
 80066c4:	6833      	ldr	r3, [r6, #0]
 80066c6:	6825      	ldr	r5, [r4, #0]
 80066c8:	6961      	ldr	r1, [r4, #20]
 80066ca:	1d18      	adds	r0, r3, #4
 80066cc:	6030      	str	r0, [r6, #0]
 80066ce:	062e      	lsls	r6, r5, #24
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	d501      	bpl.n	80066d8 <_printf_i+0x1c0>
 80066d4:	6019      	str	r1, [r3, #0]
 80066d6:	e002      	b.n	80066de <_printf_i+0x1c6>
 80066d8:	0668      	lsls	r0, r5, #25
 80066da:	d5fb      	bpl.n	80066d4 <_printf_i+0x1bc>
 80066dc:	8019      	strh	r1, [r3, #0]
 80066de:	2300      	movs	r3, #0
 80066e0:	6123      	str	r3, [r4, #16]
 80066e2:	4616      	mov	r6, r2
 80066e4:	e7bc      	b.n	8006660 <_printf_i+0x148>
 80066e6:	6833      	ldr	r3, [r6, #0]
 80066e8:	1d1a      	adds	r2, r3, #4
 80066ea:	6032      	str	r2, [r6, #0]
 80066ec:	681e      	ldr	r6, [r3, #0]
 80066ee:	6862      	ldr	r2, [r4, #4]
 80066f0:	2100      	movs	r1, #0
 80066f2:	4630      	mov	r0, r6
 80066f4:	f7f9 fd74 	bl	80001e0 <memchr>
 80066f8:	b108      	cbz	r0, 80066fe <_printf_i+0x1e6>
 80066fa:	1b80      	subs	r0, r0, r6
 80066fc:	6060      	str	r0, [r4, #4]
 80066fe:	6863      	ldr	r3, [r4, #4]
 8006700:	6123      	str	r3, [r4, #16]
 8006702:	2300      	movs	r3, #0
 8006704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006708:	e7aa      	b.n	8006660 <_printf_i+0x148>
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	4632      	mov	r2, r6
 800670e:	4649      	mov	r1, r9
 8006710:	4640      	mov	r0, r8
 8006712:	47d0      	blx	sl
 8006714:	3001      	adds	r0, #1
 8006716:	d0ad      	beq.n	8006674 <_printf_i+0x15c>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	079b      	lsls	r3, r3, #30
 800671c:	d413      	bmi.n	8006746 <_printf_i+0x22e>
 800671e:	68e0      	ldr	r0, [r4, #12]
 8006720:	9b03      	ldr	r3, [sp, #12]
 8006722:	4298      	cmp	r0, r3
 8006724:	bfb8      	it	lt
 8006726:	4618      	movlt	r0, r3
 8006728:	e7a6      	b.n	8006678 <_printf_i+0x160>
 800672a:	2301      	movs	r3, #1
 800672c:	4632      	mov	r2, r6
 800672e:	4649      	mov	r1, r9
 8006730:	4640      	mov	r0, r8
 8006732:	47d0      	blx	sl
 8006734:	3001      	adds	r0, #1
 8006736:	d09d      	beq.n	8006674 <_printf_i+0x15c>
 8006738:	3501      	adds	r5, #1
 800673a:	68e3      	ldr	r3, [r4, #12]
 800673c:	9903      	ldr	r1, [sp, #12]
 800673e:	1a5b      	subs	r3, r3, r1
 8006740:	42ab      	cmp	r3, r5
 8006742:	dcf2      	bgt.n	800672a <_printf_i+0x212>
 8006744:	e7eb      	b.n	800671e <_printf_i+0x206>
 8006746:	2500      	movs	r5, #0
 8006748:	f104 0619 	add.w	r6, r4, #25
 800674c:	e7f5      	b.n	800673a <_printf_i+0x222>
 800674e:	bf00      	nop
 8006750:	08006969 	.word	0x08006969
 8006754:	0800697a 	.word	0x0800697a

08006758 <memmove>:
 8006758:	4288      	cmp	r0, r1
 800675a:	b510      	push	{r4, lr}
 800675c:	eb01 0402 	add.w	r4, r1, r2
 8006760:	d902      	bls.n	8006768 <memmove+0x10>
 8006762:	4284      	cmp	r4, r0
 8006764:	4623      	mov	r3, r4
 8006766:	d807      	bhi.n	8006778 <memmove+0x20>
 8006768:	1e43      	subs	r3, r0, #1
 800676a:	42a1      	cmp	r1, r4
 800676c:	d008      	beq.n	8006780 <memmove+0x28>
 800676e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006776:	e7f8      	b.n	800676a <memmove+0x12>
 8006778:	4402      	add	r2, r0
 800677a:	4601      	mov	r1, r0
 800677c:	428a      	cmp	r2, r1
 800677e:	d100      	bne.n	8006782 <memmove+0x2a>
 8006780:	bd10      	pop	{r4, pc}
 8006782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800678a:	e7f7      	b.n	800677c <memmove+0x24>

0800678c <_sbrk_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4d06      	ldr	r5, [pc, #24]	@ (80067a8 <_sbrk_r+0x1c>)
 8006790:	2300      	movs	r3, #0
 8006792:	4604      	mov	r4, r0
 8006794:	4608      	mov	r0, r1
 8006796:	602b      	str	r3, [r5, #0]
 8006798:	f7fa fa90 	bl	8000cbc <_sbrk>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_sbrk_r+0x1a>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_sbrk_r+0x1a>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20004bfc 	.word	0x20004bfc

080067ac <_realloc_r>:
 80067ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b0:	4680      	mov	r8, r0
 80067b2:	4615      	mov	r5, r2
 80067b4:	460c      	mov	r4, r1
 80067b6:	b921      	cbnz	r1, 80067c2 <_realloc_r+0x16>
 80067b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067bc:	4611      	mov	r1, r2
 80067be:	f7ff bc59 	b.w	8006074 <_malloc_r>
 80067c2:	b92a      	cbnz	r2, 80067d0 <_realloc_r+0x24>
 80067c4:	f7ff fbea 	bl	8005f9c <_free_r>
 80067c8:	2400      	movs	r4, #0
 80067ca:	4620      	mov	r0, r4
 80067cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d0:	f000 f81a 	bl	8006808 <_malloc_usable_size_r>
 80067d4:	4285      	cmp	r5, r0
 80067d6:	4606      	mov	r6, r0
 80067d8:	d802      	bhi.n	80067e0 <_realloc_r+0x34>
 80067da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80067de:	d8f4      	bhi.n	80067ca <_realloc_r+0x1e>
 80067e0:	4629      	mov	r1, r5
 80067e2:	4640      	mov	r0, r8
 80067e4:	f7ff fc46 	bl	8006074 <_malloc_r>
 80067e8:	4607      	mov	r7, r0
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d0ec      	beq.n	80067c8 <_realloc_r+0x1c>
 80067ee:	42b5      	cmp	r5, r6
 80067f0:	462a      	mov	r2, r5
 80067f2:	4621      	mov	r1, r4
 80067f4:	bf28      	it	cs
 80067f6:	4632      	movcs	r2, r6
 80067f8:	f7ff fbc2 	bl	8005f80 <memcpy>
 80067fc:	4621      	mov	r1, r4
 80067fe:	4640      	mov	r0, r8
 8006800:	f7ff fbcc 	bl	8005f9c <_free_r>
 8006804:	463c      	mov	r4, r7
 8006806:	e7e0      	b.n	80067ca <_realloc_r+0x1e>

08006808 <_malloc_usable_size_r>:
 8006808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800680c:	1f18      	subs	r0, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	bfbc      	itt	lt
 8006812:	580b      	ldrlt	r3, [r1, r0]
 8006814:	18c0      	addlt	r0, r0, r3
 8006816:	4770      	bx	lr

08006818 <_init>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	bf00      	nop
 800681c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681e:	bc08      	pop	{r3}
 8006820:	469e      	mov	lr, r3
 8006822:	4770      	bx	lr

08006824 <_fini>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	bf00      	nop
 8006828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682a:	bc08      	pop	{r3}
 800682c:	469e      	mov	lr, r3
 800682e:	4770      	bx	lr
